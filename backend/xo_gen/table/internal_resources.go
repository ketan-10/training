// Code generated by xo. DO NOT EDIT.

package table

import (
	"database/sql"

	sq "github.com/elgris/sqrl"
	"github.com/ketan-10/classroom/backend/internal"
	"github.com/pkg/errors"
)

type InternalResources struct {
	ID          int           `json:"id" db:"id"`
	ResourceID  string        `json:"resource_id" db:"resource_id"`
	Name        string        `json:"name" db:"name"`
	Email       string        `json:"email" db:"email"`
	MobilePhone string        `json:"mobile_phone" db:"mobile_phone"`
	ProjectName string        `json:"project_name" db:"project_name"`
	Designation string        `json:"designation" db:"designation"`
	Active      bool          `json:"active" db:"active"`
	CreatedAt   sql.NullTime  `json:"created_at" db:"created_at"`
	UpdatedAt   sql.NullTime  `json:"updated_at" db:"updated_at"`
	CreatedBy   sql.NullInt64 `json:"created_by" db:"created_by"`
}

type InternalResourcesFilter struct {
	ID          internal.FilterOnField
	ResourceID  internal.FilterOnField
	Name        internal.FilterOnField
	Email       internal.FilterOnField
	MobilePhone internal.FilterOnField
	ProjectName internal.FilterOnField
	Designation internal.FilterOnField
	Active      internal.FilterOnField
	CreatedAt   internal.FilterOnField
	UpdatedAt   internal.FilterOnField
	CreatedBy   internal.FilterOnField
	Wheres      []sq.Sqlizer
	Joins       []sq.Sqlizer
	LeftJoins   []sq.Sqlizer
	GroupBys    []string
	Havings     []sq.Sqlizer
}

func (f *InternalResourcesFilter) NewFilter() interface{} {
	if f == nil {
		return &InternalResourcesFilter{}
	}
	return f
}

func (f *InternalResourcesFilter) TableName() string {
	return "`internal_resources`"
}

func (f *InternalResourcesFilter) ModuleName() string {
	return "internal_resources"
}

func (f *InternalResourcesFilter) IsNil() bool {
	return f == nil
}
func (f *InternalResourcesFilter) AddID(filterType internal.FilterType, v interface{}) {
	f.ID = append(f.ID, map[internal.FilterType]interface{}{filterType: v})
}
func (f *InternalResourcesFilter) AddResourceID(filterType internal.FilterType, v interface{}) {
	f.ResourceID = append(f.ResourceID, map[internal.FilterType]interface{}{filterType: v})
}
func (f *InternalResourcesFilter) AddName(filterType internal.FilterType, v interface{}) {
	f.Name = append(f.Name, map[internal.FilterType]interface{}{filterType: v})
}
func (f *InternalResourcesFilter) AddEmail(filterType internal.FilterType, v interface{}) {
	f.Email = append(f.Email, map[internal.FilterType]interface{}{filterType: v})
}
func (f *InternalResourcesFilter) AddMobilePhone(filterType internal.FilterType, v interface{}) {
	f.MobilePhone = append(f.MobilePhone, map[internal.FilterType]interface{}{filterType: v})
}
func (f *InternalResourcesFilter) AddProjectName(filterType internal.FilterType, v interface{}) {
	f.ProjectName = append(f.ProjectName, map[internal.FilterType]interface{}{filterType: v})
}
func (f *InternalResourcesFilter) AddDesignation(filterType internal.FilterType, v interface{}) {
	f.Designation = append(f.Designation, map[internal.FilterType]interface{}{filterType: v})
}
func (f *InternalResourcesFilter) AddActive(filterType internal.FilterType, v interface{}) {
	f.Active = append(f.Active, map[internal.FilterType]interface{}{filterType: v})
}
func (f *InternalResourcesFilter) AddCreatedAt(filterType internal.FilterType, v interface{}) {
	f.CreatedAt = append(f.CreatedAt, map[internal.FilterType]interface{}{filterType: v})
}
func (f *InternalResourcesFilter) AddUpdatedAt(filterType internal.FilterType, v interface{}) {
	f.UpdatedAt = append(f.UpdatedAt, map[internal.FilterType]interface{}{filterType: v})
}
func (f *InternalResourcesFilter) AddCreatedBy(filterType internal.FilterType, v interface{}) {
	f.CreatedBy = append(f.CreatedBy, map[internal.FilterType]interface{}{filterType: v})
}

func (f *InternalResourcesFilter) Where(v sq.Sqlizer) *InternalResourcesFilter {
	f.Wheres = append(f.Wheres, v)
	return f
}

func (f *InternalResourcesFilter) Join(j sq.Sqlizer) *InternalResourcesFilter {
	f.Joins = append(f.Joins, j)
	return f
}

func (f *InternalResourcesFilter) LeftJoin(j sq.Sqlizer) *InternalResourcesFilter {
	f.LeftJoins = append(f.LeftJoins, j)
	return f
}

func (f *InternalResourcesFilter) GroupBy(gb string) *InternalResourcesFilter {
	f.GroupBys = append(f.GroupBys, gb)
	return f
}

func (f *InternalResourcesFilter) Having(h sq.Sqlizer) *InternalResourcesFilter {
	f.Havings = append(f.Havings, h)
	return f
}

type InternalResourcesCreate struct {
	ResourceID  string        `json:"resource_id" db:"resource_id"`
	Name        string        `json:"name" db:"name"`
	Email       string        `json:"email" db:"email"`
	MobilePhone string        `json:"mobile_phone" db:"mobile_phone"`
	ProjectName string        `json:"project_name" db:"project_name"`
	Designation string        `json:"designation" db:"designation"`
	CreatedBy   sql.NullInt64 `json:"created_by" db:"created_by"`
}

// TODO: We have to exclude AutoGenerated fields
// For now I am keeping it in, as not sure how it affects
type InternalResourcesUpdate struct {
	ResourceID  *string        // resource_id
	Name        *string        // name
	Email       *string        // email
	MobilePhone *string        // mobile_phone
	ProjectName *string        // project_name
	Designation *string        // designation
	Active      *bool          // active
	CreatedBy   *sql.NullInt64 // created_by
}

// helper functions
func (u *InternalResourcesUpdate) ToInternalResourcesCreate() (res InternalResourcesCreate, err error) {
	if u.ResourceID != nil {
		res.ResourceID = *u.ResourceID
	} else {
		return res, errors.New("Value Can not be NULL")
	}
	if u.Name != nil {
		res.Name = *u.Name
	} else {
		return res, errors.New("Value Can not be NULL")
	}
	if u.Email != nil {
		res.Email = *u.Email
	} else {
		return res, errors.New("Value Can not be NULL")
	}
	if u.MobilePhone != nil {
		res.MobilePhone = *u.MobilePhone
	} else {
		return res, errors.New("Value Can not be NULL")
	}
	if u.ProjectName != nil {
		res.ProjectName = *u.ProjectName
	} else {
		return res, errors.New("Value Can not be NULL")
	}
	if u.Designation != nil {
		res.Designation = *u.Designation
	} else {
		return res, errors.New("Value Can not be NULL")
	}
	if u.CreatedBy != nil {
		res.CreatedBy = *u.CreatedBy
	}
	return res, nil
}

type ListInternalResources struct {
	TotalCount int
	Data       []InternalResources
}

func (l *ListInternalResources) GetAllID() []int {
	var res []int
	for _, item := range l.Data {
		res = append(res, item.ID)
	}
	return res
}
func (l *ListInternalResources) GetAllResourceID() []string {
	var res []string
	for _, item := range l.Data {
		res = append(res, item.ResourceID)
	}
	return res
}
func (l *ListInternalResources) GetAllName() []string {
	var res []string
	for _, item := range l.Data {
		res = append(res, item.Name)
	}
	return res
}
func (l *ListInternalResources) GetAllEmail() []string {
	var res []string
	for _, item := range l.Data {
		res = append(res, item.Email)
	}
	return res
}
func (l *ListInternalResources) GetAllMobilePhone() []string {
	var res []string
	for _, item := range l.Data {
		res = append(res, item.MobilePhone)
	}
	return res
}
func (l *ListInternalResources) GetAllProjectName() []string {
	var res []string
	for _, item := range l.Data {
		res = append(res, item.ProjectName)
	}
	return res
}
func (l *ListInternalResources) GetAllDesignation() []string {
	var res []string
	for _, item := range l.Data {
		res = append(res, item.Designation)
	}
	return res
}
func (l *ListInternalResources) GetAllActive() []bool {
	var res []bool
	for _, item := range l.Data {
		res = append(res, item.Active)
	}
	return res
}
func (l *ListInternalResources) GetAllCreatedAt() []sql.NullTime {
	var res []sql.NullTime
	for _, item := range l.Data {
		res = append(res, item.CreatedAt)
	}
	return res
}
func (l *ListInternalResources) GetAllUpdatedAt() []sql.NullTime {
	var res []sql.NullTime
	for _, item := range l.Data {
		res = append(res, item.UpdatedAt)
	}
	return res
}
func (l *ListInternalResources) GetAllCreatedBy() []sql.NullInt64 {
	var res []sql.NullInt64
	for _, item := range l.Data {
		res = append(res, item.CreatedBy)
	}
	return res
}

func (l *ListInternalResources) Filter(f func(item InternalResources) bool) (res ListInternalResources) {
	for _, item := range l.Data {
		if f(item) {
			res.Data = append(res.Data, item)
		}
	}
	res.TotalCount = len(res.Data)
	return res
}

func (l *ListInternalResources) Find(f func(item InternalResources) bool) (res InternalResources, found bool) {
	for _, item := range l.Data {
		if f(item) {
			return item, true
		}
	}
	return InternalResources{}, false
}

func (l *ListInternalResources) MapByCreatedBy() (m map[sql.NullInt64]ListInternalResources) {
	m = make(map[sql.NullInt64]ListInternalResources)
	for _, item := range l.Data {
		list := m[item.CreatedBy]
		list.Data = append(list.Data, item)

		m[item.CreatedBy] = list
	}
	for k, v := range m {
		v.TotalCount = len(v.Data)
		m[k] = v
	}
	return m
}

func (l *ListInternalResources) MapByEmail() (m map[string]ListInternalResources) {
	m = make(map[string]ListInternalResources)
	for _, item := range l.Data {
		list := m[item.Email]
		list.Data = append(list.Data, item)

		m[item.Email] = list
	}
	for k, v := range m {
		v.TotalCount = len(v.Data)
		m[k] = v
	}
	return m
}

func (l *ListInternalResources) MapByResourceID() (m map[string]ListInternalResources) {
	m = make(map[string]ListInternalResources)
	for _, item := range l.Data {
		list := m[item.ResourceID]
		list.Data = append(list.Data, item)

		m[item.ResourceID] = list
	}
	for k, v := range m {
		v.TotalCount = len(v.Data)
		m[k] = v
	}
	return m
}

func (l *ListInternalResources) MapByName() (m map[string]ListInternalResources) {
	m = make(map[string]ListInternalResources)
	for _, item := range l.Data {
		list := m[item.Name]
		list.Data = append(list.Data, item)

		m[item.Name] = list
	}
	for k, v := range m {
		v.TotalCount = len(v.Data)
		m[k] = v
	}
	return m
}

func (l *ListInternalResources) MapByID() (m map[int]InternalResources) {
	m = make(map[int]InternalResources, len(l.Data))
	for _, item := range l.Data {
		m[item.ID] = item
	}
	return m
}
