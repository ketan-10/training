// Code generated by xo. DO NOT EDIT.

package rlts

import (
	"context"

	"github.com/google/wire"
	"github.com/ketan-10/training/backend/internal"
	"github.com/ketan-10/training/backend/xo_gen/repo"
	"github.com/ketan-10/training/backend/xo_gen/table"
)

type IStudentsRltsRepository interface {

	// This Table Pointing to Other Table!!!, ManyToOne <- As Many records from other table can point to this table one record
	UserByCreatedBy(ctx context.Context, obj *table.Students, filter *table.UserFilter) (*table.User, error)

	//  Other Table Pointing to This Table!!!, OneToMany <- As This Table record can point to Multiple Other table record
	AttendancesByFkStudent(ctx context.Context, obj *table.Students, filter *table.AttendancesFilter, pagination *internal.Pagination) (*table.ListAttendances, error)
	RegistrationsByFkStudent(ctx context.Context, obj *table.Students, filter *table.RegistrationsFilter, pagination *internal.Pagination) (*table.ListRegistrations, error)
	TrainerTrainingMappingByFkStudent(ctx context.Context, obj *table.Students, filter *table.TrainerTrainingMappingFilter, pagination *internal.Pagination) (*table.ListTrainerTrainingMapping, error)
}

type StudentsRltsRepository struct {
	UserRepository repo.IUserRepository

	AttendancesRepository repo.IAttendancesRepository

	RegistrationsRepository repo.IRegistrationsRepository

	TrainerTrainingMappingRepository repo.ITrainerTrainingMappingRepository
}

var NewStudentsRltsRepository = wire.NewSet(
	wire.Struct(new(StudentsRltsRepository), "*"),
	wire.Bind(new(IStudentsRltsRepository), new(*StudentsRltsRepository)),
)

func (sr *StudentsRltsRepository) UserByCreatedBy(ctx context.Context, obj *table.Students, filter *table.UserFilter) (*table.User, error) {
	if obj == nil {
		return nil, nil
	}

	if filter == nil {
		filter = &table.UserFilter{}
	}

	filter.AddID(internal.Eq, obj.CreatedBy)
	result, err := sr.UserRepository.FindAllUser(ctx, filter, nil)

	if err != nil {
		return nil, err
	}

	if result.TotalCount == 0 {
		return nil, nil
	}
	return &result.Data[0], nil
}
func (sr *StudentsRltsRepository) AttendancesByFkStudent(ctx context.Context, obj *table.Students, filter *table.AttendancesFilter, pagination *internal.Pagination) (*table.ListAttendances, error) {
	if obj == nil {
		return &table.ListAttendances{}, nil
	}
	return sr.AttendancesRepository.AttendancesByFkStudent(ctx, obj.ID, filter, pagination)
}
func (sr *StudentsRltsRepository) RegistrationsByFkStudent(ctx context.Context, obj *table.Students, filter *table.RegistrationsFilter, pagination *internal.Pagination) (*table.ListRegistrations, error) {
	if obj == nil {
		return &table.ListRegistrations{}, nil
	}
	return sr.RegistrationsRepository.RegistrationsByFkStudent(ctx, obj.ID, filter, pagination)
}
func (sr *StudentsRltsRepository) TrainerTrainingMappingByFkStudent(ctx context.Context, obj *table.Students, filter *table.TrainerTrainingMappingFilter, pagination *internal.Pagination) (*table.ListTrainerTrainingMapping, error) {
	if obj == nil {
		return &table.ListTrainerTrainingMapping{}, nil
	}
	return sr.TrainerTrainingMappingRepository.TrainerTrainingMappingByFkStudent(ctx, obj.ID, filter, pagination)
}
