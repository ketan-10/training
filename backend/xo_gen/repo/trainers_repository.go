// Code generated by xo. DO NOT EDIT.

package repo

import (
	"context"
	"database/sql"

	sq "github.com/elgris/sqrl"
	"github.com/google/wire"
	"github.com/ketan-10/training/backend/internal"
	"github.com/ketan-10/training/backend/xo_gen/table"
)

type ITrainersRepository interface {
	ITrainersRepositoryQueryBuilder

	InsertTrainers(ctx context.Context, t table.TrainersCreate) (*table.Trainers, error)
	InsertTrainersWithSuffix(ctx context.Context, t table.TrainersCreate, suffix sq.Sqlizer) (*table.Trainers, error)
	InsertTrainersIDResult(ctx context.Context, t table.TrainersCreate, suffix sq.Sqlizer) (int64, error)

	UpdateTrainersByFields(ctx context.Context, id int, t table.TrainersUpdate) (*table.Trainers, error)
	UpdateTrainers(ctx context.Context, t table.Trainers) (*table.Trainers, error)

	DeleteTrainers(ctx context.Context, t table.Trainers) error
	DeleteTrainersByID(ctx context.Context, id int) (bool, error)

	FindAllTrainers(ctx context.Context, t *table.TrainersFilter, pagination *internal.Pagination) (*table.ListTrainers, error)
	FindAllTrainersWithSuffix(ctx context.Context, t *table.TrainersFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListTrainers, error)

	TrainersByName(ctx context.Context, name string, filter *table.TrainersFilter, pagination *internal.Pagination) (*table.ListTrainers, error)

	TrainersByNameWithSuffix(ctx context.Context, name string, filter *table.TrainersFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListTrainers, error)

	TrainersByCreatedBy(ctx context.Context, createdBy sql.NullInt64, filter *table.TrainersFilter, pagination *internal.Pagination) (*table.ListTrainers, error)

	TrainersByCreatedByWithSuffix(ctx context.Context, createdBy sql.NullInt64, filter *table.TrainersFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListTrainers, error)
	TrainersByID(ctx context.Context, id int, filter *table.TrainersFilter) (table.Trainers, error)

	TrainersByIDWithSuffix(ctx context.Context, id int, filter *table.TrainersFilter, suffixes ...sq.Sqlizer) (table.Trainers, error)

	TrainersByEmail(ctx context.Context, email string, filter *table.TrainersFilter, pagination *internal.Pagination) (*table.ListTrainers, error)

	TrainersByEmailWithSuffix(ctx context.Context, email string, filter *table.TrainersFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListTrainers, error)
}

type ITrainersRepositoryQueryBuilder interface {
	FindAllTrainersBaseQuery(ctx context.Context, filter *table.TrainersFilter, fields string, suffix ...sq.Sqlizer) (*sq.SelectBuilder, error)
	AddPagination(ctx context.Context, qb *sq.SelectBuilder, pagination *internal.Pagination) (*sq.SelectBuilder, error)
}

type TrainersRepository struct {
	DB           internal.IDb
	QueryBuilder ITrainersRepositoryQueryBuilder
}

type TrainersRepositoryQueryBuilder struct {
}

var NewTrainersRepository = wire.NewSet(
	wire.Struct(new(TrainersRepository), "*"),
	wire.Struct(new(TrainersRepositoryQueryBuilder), "*"),
	wire.Bind(new(ITrainersRepository), new(*TrainersRepository)),
	wire.Bind(new(ITrainersRepositoryQueryBuilder), new(*TrainersRepositoryQueryBuilder)),
)

func (tr *TrainersRepository) InsertTrainers(ctx context.Context, t table.TrainersCreate) (*table.Trainers, error) {
	return tr.InsertTrainersWithSuffix(ctx, t, nil)
}

func (tr *TrainersRepository) InsertTrainersWithSuffix(ctx context.Context, t table.TrainersCreate, suffix sq.Sqlizer) (*table.Trainers, error) {
	var err error

	id, err := tr.InsertTrainersIDResult(ctx, t, suffix)
	if err != nil {
		return nil, err
	}
	newt := table.Trainers{}
	qb := sq.Select("*").From(`trainers`)

	qb.Where(sq.Eq{"`id`": id})
	err = tr.DB.Get(ctx, &newt, qb)

	if err != nil {
		return nil, err
	}
	return &newt, nil
}

func (tr *TrainersRepository) InsertTrainersIDResult(ctx context.Context, t table.TrainersCreate, suffix sq.Sqlizer) (int64, error) {
	var err error

	qb := sq.Insert("`trainers`").Columns(
		"`uuid`",
		"`name`",
		"`email`",
		"`mobile_phone`",
		"`designation`",
		"`created_by`",
	).Values(
		t.UUID,
		t.Name,
		t.Email,
		t.MobilePhone,
		t.Designation,
		t.CreatedBy,
	)
	if suffix != nil {
		suffixQuery, suffixArgs, suffixErr := suffix.ToSql()
		if suffixErr != nil {
			return 0, suffixErr
		}
		qb.Suffix(suffixQuery, suffixArgs...)
	}

	// run query
	res, err := tr.DB.Exec(ctx, qb)
	if err != nil {
		return 0, err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return 0, err
	}

	return id, nil
}

func (tr *TrainersRepository) UpdateTrainersByFields(ctx context.Context, id int, t table.TrainersUpdate) (*table.Trainers, error) {
	var err error

	updateMap := map[string]interface{}{}
	if t.UUID != nil {
		updateMap["`uuid`"] = *t.UUID
	}
	if t.Name != nil {
		updateMap["`name`"] = *t.Name
	}
	if t.Email != nil {
		updateMap["`email`"] = *t.Email
	}
	if t.MobilePhone != nil {
		updateMap["`mobile_phone`"] = *t.MobilePhone
	}
	if t.Designation != nil {
		updateMap["`designation`"] = *t.Designation
	}
	if t.Active != nil {
		updateMap["`active`"] = *t.Active
	}
	if t.CreatedBy != nil {
		updateMap["`created_by`"] = *t.CreatedBy
	}

	qb := sq.Update(`trainers`).SetMap(updateMap).Where(sq.Eq{"`id`": id})

	_, err = tr.DB.Exec(ctx, qb)
	if err != nil {
		return nil, err
	}

	selectQb := sq.Select("*").From("`trainers`")

	selectQb = selectQb.Where(sq.Eq{"`id`": id})

	result := table.Trainers{}
	err = tr.DB.Get(ctx, &result, selectQb)
	if err != nil {
		return nil, err
	}

	return &result, nil

}

func (tr *TrainersRepository) UpdateTrainers(ctx context.Context, t table.Trainers) (*table.Trainers, error) {
	var err error

	// sql query
	qb := sq.Update("`trainers`").SetMap(map[string]interface{}{
		"`uuid`":         t.UUID,
		"`name`":         t.Name,
		"`email`":        t.Email,
		"`mobile_phone`": t.MobilePhone,
		"`designation`":  t.Designation,
		"`active`":       t.Active,
		"`created_by`":   t.CreatedBy,
	}).Where(sq.Eq{"`id`": t.ID})

	// run query
	_, err = tr.DB.Exec(ctx, qb)
	if err != nil {
		return nil, err
	}

	selectQb := sq.Select("*").From("`trainers`")
	selectQb = selectQb.Where(sq.Eq{"`id`": t.ID})

	result := table.Trainers{}
	err = tr.DB.Get(ctx, &result, selectQb)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (tr *TrainersRepository) DeleteTrainers(ctx context.Context, t table.Trainers) error {
	_, err := tr.DeleteTrainersByID(ctx, t.ID)
	return err
}

func (tr *TrainersRepository) DeleteTrainersByID(ctx context.Context, id int) (bool, error) {
	var err error

	qb := sq.Update("`trainers`").Set("active", false)

	qb = qb.Where(sq.Eq{"`id`": id})

	_, err = tr.DB.Exec(ctx, qb)
	if err != nil {
		return false, err
	}
	return true, nil
}

func (tr *TrainersRepository) FindAllTrainersBaseQuery(ctx context.Context, filter *table.TrainersFilter, fields string, suffixes ...sq.Sqlizer) (*sq.SelectBuilder, error) {
	return tr.QueryBuilder.FindAllTrainersBaseQuery(ctx, filter, fields, suffixes...)
}

func (tr *TrainersRepositoryQueryBuilder) FindAllTrainersBaseQuery(ctx context.Context, filter *table.TrainersFilter, fields string, suffixes ...sq.Sqlizer) (*sq.SelectBuilder, error) {
	var err error
	qb := sq.Select(fields).From("`trainers`")
	if filter != nil {
		if qb, err = internal.AddFilter(qb, "`trainers`.`id`", filter.ID); err != nil {
			return qb, err
		}
		if qb, err = internal.AddFilter(qb, "`trainers`.`uuid`", filter.UUID); err != nil {
			return qb, err
		}
		if qb, err = internal.AddFilter(qb, "`trainers`.`name`", filter.Name); err != nil {
			return qb, err
		}
		if qb, err = internal.AddFilter(qb, "`trainers`.`email`", filter.Email); err != nil {
			return qb, err
		}
		if qb, err = internal.AddFilter(qb, "`trainers`.`mobile_phone`", filter.MobilePhone); err != nil {
			return qb, err
		}
		if qb, err = internal.AddFilter(qb, "`trainers`.`designation`", filter.Designation); err != nil {
			return qb, err
		}
		if filter.Active == nil {
			if qb, err = internal.AddFilter(qb, "`trainers`.`active`", internal.FilterOnField{{internal.Eq: true}}); err != nil {
				return qb, err
			}
		} else {
			if qb, err = internal.AddFilter(qb, "`trainers`.`active`", filter.Active); err != nil {
				return qb, err
			}
		}
		if qb, err = internal.AddFilter(qb, "`trainers`.`created_at`", filter.CreatedAt); err != nil {
			return qb, err
		}
		if qb, err = internal.AddFilter(qb, "`trainers`.`updated_at`", filter.UpdatedAt); err != nil {
			return qb, err
		}
		if qb, err = internal.AddFilter(qb, "`trainers`.`created_by`", filter.CreatedBy); err != nil {
			return qb, err
		}
		qb, err = internal.AddAdditionalFilter(qb, filter.Wheres, filter.Joins, filter.LeftJoins, filter.GroupBys, filter.Havings)
		if err != nil {
			return qb, err
		}
	} else {
		if qb, err = internal.AddFilter(qb, "`trainers`.`active`", internal.FilterOnField{{internal.Eq: true}}); err != nil {
			return qb, err
		}
	}

	for _, suffix := range suffixes {
		query, args, err := suffix.ToSql()
		if err != nil {
			return qb, err
		}
		qb.Suffix(query, args...)
	}
	return qb, nil
}

func (tr *TrainersRepository) AddPagination(ctx context.Context, qb *sq.SelectBuilder, pagination *internal.Pagination) (*sq.SelectBuilder, error) {
	return tr.QueryBuilder.AddPagination(ctx, qb, pagination)
}

func (t *TrainersRepositoryQueryBuilder) AddPagination(ctx context.Context, qb *sq.SelectBuilder, pagination *internal.Pagination) (*sq.SelectBuilder, error) {
	fields := []string{
		"id",
		"uuid",
		"name",
		"email",
		"mobile_phone",
		"designation",
		"active",
		"created_at",
		"updated_at",
		"created_by",
	}
	return internal.AddPagination(qb, pagination, "trainers", fields)
}

func (tr *TrainersRepository) FindAllTrainers(ctx context.Context, filter *table.TrainersFilter, pagination *internal.Pagination) (*table.ListTrainers, error) {
	return tr.FindAllTrainersWithSuffix(ctx, filter, pagination)
}

func (tr *TrainersRepository) FindAllTrainersWithSuffix(ctx context.Context, filter *table.TrainersFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListTrainers, error) {
	var list table.ListTrainers
	qb, err := tr.FindAllTrainersBaseQuery(ctx, filter, "`trainers`.*", suffixes...)
	if err != nil {
		return &list, err
	}
	qb, err = tr.AddPagination(ctx, qb, pagination)
	if err != nil {
		return &list, err
	}

	err = tr.DB.Select(ctx, &list.Data, qb)

	if err != nil {
		return &list, err
	}

	if pagination == nil || pagination.PerPage == nil || pagination.Page == nil {
		list.TotalCount = len(list.Data)
		return &list, nil
	}

	var listMeta internal.ListMetadata
	if qb, err = tr.FindAllTrainersBaseQuery(ctx, filter, "COUNT(1) AS count"); err != nil {
		return &table.ListTrainers{}, err
	}
	if filter != nil && len(filter.GroupBys) > 0 {
		qb = sq.Select("COUNT(1) AS count").FromSelect(qb, "a")
	}
	err = tr.DB.Get(ctx, &listMeta, qb)

	list.TotalCount = listMeta.Count

	return &list, err
}

func (tr *TrainersRepository) TrainersByName(ctx context.Context, name string, filter *table.TrainersFilter, pagination *internal.Pagination) (*table.ListTrainers, error) {
	return tr.TrainersByNameWithSuffix(ctx, name, filter, pagination)
}

func (tr *TrainersRepository) TrainersByNameWithSuffix(ctx context.Context, name string, filter *table.TrainersFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListTrainers, error) {

	var list table.ListTrainers
	// sql query
	qb, err := tr.FindAllTrainersBaseQuery(ctx, filter, "`trainers`.*", suffixes...)
	if err != nil {
		return &list, err
	}
	qb = qb.Where(sq.Eq{"`trainers`.`name`": name})

	if qb, err = tr.AddPagination(ctx, qb, pagination); err != nil {
		return &list, err
	}

	// run query
	if err = tr.DB.Select(ctx, &list.Data, qb); err != nil {
		return &list, err
	}

	if pagination == nil || pagination.PerPage == nil || pagination.Page == nil {
		list.TotalCount = len(list.Data)
		return &list, nil
	}

	var listMeta internal.ListMetadata
	if qb, err = tr.FindAllTrainersBaseQuery(ctx, filter, "COUNT(1) AS count"); err != nil {
		return &list, err
	}
	if filter != nil && len(filter.GroupBys) > 0 {
		qb = sq.Select("COUNT(1) AS count").FromSelect(qb, "a")
	}
	qb = qb.Where(sq.Eq{"`trainers`.`name`": name})
	if err = tr.DB.Get(ctx, &listMeta, qb); err != nil {
		return &list, err
	}

	list.TotalCount = listMeta.Count

	return &list, nil

}

func (tr *TrainersRepository) TrainersByCreatedBy(ctx context.Context, createdBy sql.NullInt64, filter *table.TrainersFilter, pagination *internal.Pagination) (*table.ListTrainers, error) {
	return tr.TrainersByCreatedByWithSuffix(ctx, createdBy, filter, pagination)
}

func (tr *TrainersRepository) TrainersByCreatedByWithSuffix(ctx context.Context, createdBy sql.NullInt64, filter *table.TrainersFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListTrainers, error) {

	var list table.ListTrainers
	// sql query
	qb, err := tr.FindAllTrainersBaseQuery(ctx, filter, "`trainers`.*", suffixes...)
	if err != nil {
		return &list, err
	}
	qb = qb.Where(sq.Eq{"`trainers`.`created_by`": createdBy})

	if qb, err = tr.AddPagination(ctx, qb, pagination); err != nil {
		return &list, err
	}

	// run query
	if err = tr.DB.Select(ctx, &list.Data, qb); err != nil {
		return &list, err
	}

	if pagination == nil || pagination.PerPage == nil || pagination.Page == nil {
		list.TotalCount = len(list.Data)
		return &list, nil
	}

	var listMeta internal.ListMetadata
	if qb, err = tr.FindAllTrainersBaseQuery(ctx, filter, "COUNT(1) AS count"); err != nil {
		return &list, err
	}
	if filter != nil && len(filter.GroupBys) > 0 {
		qb = sq.Select("COUNT(1) AS count").FromSelect(qb, "a")
	}
	qb = qb.Where(sq.Eq{"`trainers`.`created_by`": createdBy})
	if err = tr.DB.Get(ctx, &listMeta, qb); err != nil {
		return &list, err
	}

	list.TotalCount = listMeta.Count

	return &list, nil

}
func (tr *TrainersRepository) TrainersByID(ctx context.Context, id int, filter *table.TrainersFilter) (table.Trainers, error) {
	return tr.TrainersByIDWithSuffix(ctx, id, filter)
}

func (tr *TrainersRepository) TrainersByIDWithSuffix(ctx context.Context, id int, filter *table.TrainersFilter, suffixes ...sq.Sqlizer) (table.Trainers, error) {
	var err error

	// sql query
	qb, err := tr.FindAllTrainersBaseQuery(ctx, filter, "`trainers`.*", suffixes...)
	if err != nil {
		return table.Trainers{}, err
	}
	qb = qb.Where(sq.Eq{"`trainers`.`id`": id})

	// run query
	t := table.Trainers{}
	err = tr.DB.Get(ctx, &t, qb)
	if err != nil {
		return table.Trainers{}, err
	}
	return t, nil
}

func (tr *TrainersRepository) TrainersByEmail(ctx context.Context, email string, filter *table.TrainersFilter, pagination *internal.Pagination) (*table.ListTrainers, error) {
	return tr.TrainersByEmailWithSuffix(ctx, email, filter, pagination)
}

func (tr *TrainersRepository) TrainersByEmailWithSuffix(ctx context.Context, email string, filter *table.TrainersFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListTrainers, error) {

	var list table.ListTrainers
	// sql query
	qb, err := tr.FindAllTrainersBaseQuery(ctx, filter, "`trainers`.*", suffixes...)
	if err != nil {
		return &list, err
	}
	qb = qb.Where(sq.Eq{"`trainers`.`email`": email})

	if qb, err = tr.AddPagination(ctx, qb, pagination); err != nil {
		return &list, err
	}

	// run query
	if err = tr.DB.Select(ctx, &list.Data, qb); err != nil {
		return &list, err
	}

	if pagination == nil || pagination.PerPage == nil || pagination.Page == nil {
		list.TotalCount = len(list.Data)
		return &list, nil
	}

	var listMeta internal.ListMetadata
	if qb, err = tr.FindAllTrainersBaseQuery(ctx, filter, "COUNT(1) AS count"); err != nil {
		return &list, err
	}
	if filter != nil && len(filter.GroupBys) > 0 {
		qb = sq.Select("COUNT(1) AS count").FromSelect(qb, "a")
	}
	qb = qb.Where(sq.Eq{"`trainers`.`email`": email})
	if err = tr.DB.Get(ctx, &listMeta, qb); err != nil {
		return &list, err
	}

	list.TotalCount = listMeta.Count

	return &list, nil

}
