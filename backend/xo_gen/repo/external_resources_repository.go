// Code generated by xo. DO NOT EDIT.

package repo

import (
	"context"
	"database/sql"

	sq "github.com/elgris/sqrl"
	"github.com/google/wire"
	"github.com/ketan-10/training/backend/internal"
	"github.com/ketan-10/training/backend/xo_gen/table"
)

type IExternalResourcesRepository interface {
	IExternalResourcesRepositoryQueryBuilder

	InsertExternalResources(ctx context.Context, er_ table.ExternalResourcesCreate) (*table.ExternalResources, error)
	InsertExternalResourcesWithSuffix(ctx context.Context, er_ table.ExternalResourcesCreate, suffix sq.Sqlizer) (*table.ExternalResources, error)
	InsertExternalResourcesIDResult(ctx context.Context, er_ table.ExternalResourcesCreate, suffix sq.Sqlizer) (int64, error)

	UpdateExternalResourcesByFields(ctx context.Context, id int, er_ table.ExternalResourcesUpdate) (*table.ExternalResources, error)
	UpdateExternalResources(ctx context.Context, er_ table.ExternalResources) (*table.ExternalResources, error)

	DeleteExternalResources(ctx context.Context, er_ table.ExternalResources) error
	DeleteExternalResourcesByID(ctx context.Context, id int) (bool, error)

	FindAllExternalResources(ctx context.Context, er_ *table.ExternalResourcesFilter, pagination *internal.Pagination) (*table.ListExternalResources, error)
	FindAllExternalResourcesWithSuffix(ctx context.Context, er_ *table.ExternalResourcesFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListExternalResources, error)

	ExternalResourcesByCreatedBy(ctx context.Context, createdBy sql.NullInt64, filter *table.ExternalResourcesFilter, pagination *internal.Pagination) (*table.ListExternalResources, error)

	ExternalResourcesByCreatedByWithSuffix(ctx context.Context, createdBy sql.NullInt64, filter *table.ExternalResourcesFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListExternalResources, error)

	ExternalResourcesByEmail(ctx context.Context, email string, filter *table.ExternalResourcesFilter, pagination *internal.Pagination) (*table.ListExternalResources, error)

	ExternalResourcesByEmailWithSuffix(ctx context.Context, email string, filter *table.ExternalResourcesFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListExternalResources, error)

	ExternalResourcesByName(ctx context.Context, name string, filter *table.ExternalResourcesFilter, pagination *internal.Pagination) (*table.ListExternalResources, error)

	ExternalResourcesByNameWithSuffix(ctx context.Context, name string, filter *table.ExternalResourcesFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListExternalResources, error)
	ExternalResourcesByID(ctx context.Context, id int, filter *table.ExternalResourcesFilter) (table.ExternalResources, error)

	ExternalResourcesByIDWithSuffix(ctx context.Context, id int, filter *table.ExternalResourcesFilter, suffixes ...sq.Sqlizer) (table.ExternalResources, error)
}

type IExternalResourcesRepositoryQueryBuilder interface {
	FindAllExternalResourcesBaseQuery(ctx context.Context, filter *table.ExternalResourcesFilter, fields string, suffix ...sq.Sqlizer) (*sq.SelectBuilder, error)
	AddPagination(ctx context.Context, qb *sq.SelectBuilder, pagination *internal.Pagination) (*sq.SelectBuilder, error)
}

type ExternalResourcesRepository struct {
	DB           internal.IDb
	QueryBuilder IExternalResourcesRepositoryQueryBuilder
}

type ExternalResourcesRepositoryQueryBuilder struct {
}

var NewExternalResourcesRepository = wire.NewSet(
	wire.Struct(new(ExternalResourcesRepository), "*"),
	wire.Struct(new(ExternalResourcesRepositoryQueryBuilder), "*"),
	wire.Bind(new(IExternalResourcesRepository), new(*ExternalResourcesRepository)),
	wire.Bind(new(IExternalResourcesRepositoryQueryBuilder), new(*ExternalResourcesRepositoryQueryBuilder)),
)

func (er_r *ExternalResourcesRepository) InsertExternalResources(ctx context.Context, er_ table.ExternalResourcesCreate) (*table.ExternalResources, error) {
	return er_r.InsertExternalResourcesWithSuffix(ctx, er_, nil)
}

func (er_r *ExternalResourcesRepository) InsertExternalResourcesWithSuffix(ctx context.Context, er_ table.ExternalResourcesCreate, suffix sq.Sqlizer) (*table.ExternalResources, error) {
	var err error

	id, err := er_r.InsertExternalResourcesIDResult(ctx, er_, suffix)
	if err != nil {
		return nil, err
	}
	newer_ := table.ExternalResources{}
	qb := sq.Select("*").From(`external_resources`)

	qb.Where(sq.Eq{"`id`": id})
	err = er_r.DB.Get(ctx, &newer_, qb)

	if err != nil {
		return nil, err
	}
	return &newer_, nil
}

func (er_r *ExternalResourcesRepository) InsertExternalResourcesIDResult(ctx context.Context, er_ table.ExternalResourcesCreate, suffix sq.Sqlizer) (int64, error) {
	var err error

	qb := sq.Insert("`external_resources`").Columns(
		"`resource_id`",
		"`name`",
		"`email`",
		"`mobile_phone`",
		"`designation`",
		"`created_by`",
	).Values(
		er_.ResourceID,
		er_.Name,
		er_.Email,
		er_.MobilePhone,
		er_.Designation,
		er_.CreatedBy,
	)
	if suffix != nil {
		suffixQuery, suffixArgs, suffixErr := suffix.ToSql()
		if suffixErr != nil {
			return 0, suffixErr
		}
		qb.Suffix(suffixQuery, suffixArgs...)
	}

	// run query
	res, err := er_r.DB.Exec(ctx, qb)
	if err != nil {
		return 0, err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return 0, err
	}

	return id, nil
}

func (er_r *ExternalResourcesRepository) UpdateExternalResourcesByFields(ctx context.Context, id int, er_ table.ExternalResourcesUpdate) (*table.ExternalResources, error) {
	var err error

	updateMap := map[string]interface{}{}
	if er_.ResourceID != nil {
		updateMap["`resource_id`"] = *er_.ResourceID
	}
	if er_.Name != nil {
		updateMap["`name`"] = *er_.Name
	}
	if er_.Email != nil {
		updateMap["`email`"] = *er_.Email
	}
	if er_.MobilePhone != nil {
		updateMap["`mobile_phone`"] = *er_.MobilePhone
	}
	if er_.Designation != nil {
		updateMap["`designation`"] = *er_.Designation
	}
	if er_.Active != nil {
		updateMap["`active`"] = *er_.Active
	}
	if er_.CreatedBy != nil {
		updateMap["`created_by`"] = *er_.CreatedBy
	}

	qb := sq.Update(`external_resources`).SetMap(updateMap).Where(sq.Eq{"`id`": id})

	_, err = er_r.DB.Exec(ctx, qb)
	if err != nil {
		return nil, err
	}

	selectQb := sq.Select("*").From("`external_resources`")

	selectQb = selectQb.Where(sq.Eq{"`id`": id})

	result := table.ExternalResources{}
	err = er_r.DB.Get(ctx, &result, selectQb)
	if err != nil {
		return nil, err
	}

	return &result, nil

}

func (er_r *ExternalResourcesRepository) UpdateExternalResources(ctx context.Context, er_ table.ExternalResources) (*table.ExternalResources, error) {
	var err error

	// sql query
	qb := sq.Update("`external_resources`").SetMap(map[string]interface{}{
		"`resource_id`":  er_.ResourceID,
		"`name`":         er_.Name,
		"`email`":        er_.Email,
		"`mobile_phone`": er_.MobilePhone,
		"`designation`":  er_.Designation,
		"`active`":       er_.Active,
		"`created_by`":   er_.CreatedBy,
	}).Where(sq.Eq{"`id`": er_.ID})

	// run query
	_, err = er_r.DB.Exec(ctx, qb)
	if err != nil {
		return nil, err
	}

	selectQb := sq.Select("*").From("`external_resources`")
	selectQb = selectQb.Where(sq.Eq{"`id`": er_.ID})

	result := table.ExternalResources{}
	err = er_r.DB.Get(ctx, &result, selectQb)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (er_r *ExternalResourcesRepository) DeleteExternalResources(ctx context.Context, er_ table.ExternalResources) error {
	_, err := er_r.DeleteExternalResourcesByID(ctx, er_.ID)
	return err
}

func (er_r *ExternalResourcesRepository) DeleteExternalResourcesByID(ctx context.Context, id int) (bool, error) {
	var err error

	qb := sq.Update("`external_resources`").Set("active", false)

	qb = qb.Where(sq.Eq{"`id`": id})

	_, err = er_r.DB.Exec(ctx, qb)
	if err != nil {
		return false, err
	}
	return true, nil
}

func (er_r *ExternalResourcesRepository) FindAllExternalResourcesBaseQuery(ctx context.Context, filter *table.ExternalResourcesFilter, fields string, suffixes ...sq.Sqlizer) (*sq.SelectBuilder, error) {
	return er_r.QueryBuilder.FindAllExternalResourcesBaseQuery(ctx, filter, fields, suffixes...)
}

func (er_r *ExternalResourcesRepositoryQueryBuilder) FindAllExternalResourcesBaseQuery(ctx context.Context, filter *table.ExternalResourcesFilter, fields string, suffixes ...sq.Sqlizer) (*sq.SelectBuilder, error) {
	var err error
	qb := sq.Select(fields).From("`external_resources`")
	if filter != nil {
		if qb, err = internal.AddFilter(qb, "`external_resources`.`id`", filter.ID); err != nil {
			return qb, err
		}
		if qb, err = internal.AddFilter(qb, "`external_resources`.`resource_id`", filter.ResourceID); err != nil {
			return qb, err
		}
		if qb, err = internal.AddFilter(qb, "`external_resources`.`name`", filter.Name); err != nil {
			return qb, err
		}
		if qb, err = internal.AddFilter(qb, "`external_resources`.`email`", filter.Email); err != nil {
			return qb, err
		}
		if qb, err = internal.AddFilter(qb, "`external_resources`.`mobile_phone`", filter.MobilePhone); err != nil {
			return qb, err
		}
		if qb, err = internal.AddFilter(qb, "`external_resources`.`designation`", filter.Designation); err != nil {
			return qb, err
		}
		if filter.Active == nil {
			if qb, err = internal.AddFilter(qb, "`external_resources`.`active`", internal.FilterOnField{{internal.Eq: true}}); err != nil {
				return qb, err
			}
		} else {
			if qb, err = internal.AddFilter(qb, "`external_resources`.`active`", filter.Active); err != nil {
				return qb, err
			}
		}
		if qb, err = internal.AddFilter(qb, "`external_resources`.`created_at`", filter.CreatedAt); err != nil {
			return qb, err
		}
		if qb, err = internal.AddFilter(qb, "`external_resources`.`updated_at`", filter.UpdatedAt); err != nil {
			return qb, err
		}
		if qb, err = internal.AddFilter(qb, "`external_resources`.`created_by`", filter.CreatedBy); err != nil {
			return qb, err
		}
		qb, err = internal.AddAdditionalFilter(qb, filter.Wheres, filter.Joins, filter.LeftJoins, filter.GroupBys, filter.Havings)
		if err != nil {
			return qb, err
		}
	} else {
		if qb, err = internal.AddFilter(qb, "`external_resources`.`active`", internal.FilterOnField{{internal.Eq: true}}); err != nil {
			return qb, err
		}
	}

	for _, suffix := range suffixes {
		query, args, err := suffix.ToSql()
		if err != nil {
			return qb, err
		}
		qb.Suffix(query, args...)
	}
	return qb, nil
}

func (er_r *ExternalResourcesRepository) AddPagination(ctx context.Context, qb *sq.SelectBuilder, pagination *internal.Pagination) (*sq.SelectBuilder, error) {
	return er_r.QueryBuilder.AddPagination(ctx, qb, pagination)
}

func (er_ *ExternalResourcesRepositoryQueryBuilder) AddPagination(ctx context.Context, qb *sq.SelectBuilder, pagination *internal.Pagination) (*sq.SelectBuilder, error) {
	fields := []string{
		"id",
		"resource_id",
		"name",
		"email",
		"mobile_phone",
		"designation",
		"active",
		"created_at",
		"updated_at",
		"created_by",
	}
	return internal.AddPagination(qb, pagination, "external_resources", fields)
}

func (er_r *ExternalResourcesRepository) FindAllExternalResources(ctx context.Context, filter *table.ExternalResourcesFilter, pagination *internal.Pagination) (*table.ListExternalResources, error) {
	return er_r.FindAllExternalResourcesWithSuffix(ctx, filter, pagination)
}

func (er_r *ExternalResourcesRepository) FindAllExternalResourcesWithSuffix(ctx context.Context, filter *table.ExternalResourcesFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListExternalResources, error) {
	var list table.ListExternalResources
	qb, err := er_r.FindAllExternalResourcesBaseQuery(ctx, filter, "`external_resources`.*", suffixes...)
	if err != nil {
		return &list, err
	}
	qb, err = er_r.AddPagination(ctx, qb, pagination)
	if err != nil {
		return &list, err
	}

	err = er_r.DB.Select(ctx, &list.Data, qb)

	if err != nil {
		return &list, err
	}

	if pagination == nil || pagination.PerPage == nil || pagination.Page == nil {
		list.TotalCount = len(list.Data)
		return &list, nil
	}

	var listMeta internal.ListMetadata
	if qb, err = er_r.FindAllExternalResourcesBaseQuery(ctx, filter, "COUNT(1) AS count"); err != nil {
		return &table.ListExternalResources{}, err
	}
	if filter != nil && len(filter.GroupBys) > 0 {
		qb = sq.Select("COUNT(1) AS count").FromSelect(qb, "a")
	}
	err = er_r.DB.Get(ctx, &listMeta, qb)

	list.TotalCount = listMeta.Count

	return &list, err
}

func (er_r *ExternalResourcesRepository) ExternalResourcesByCreatedBy(ctx context.Context, createdBy sql.NullInt64, filter *table.ExternalResourcesFilter, pagination *internal.Pagination) (*table.ListExternalResources, error) {
	return er_r.ExternalResourcesByCreatedByWithSuffix(ctx, createdBy, filter, pagination)
}

func (er_r *ExternalResourcesRepository) ExternalResourcesByCreatedByWithSuffix(ctx context.Context, createdBy sql.NullInt64, filter *table.ExternalResourcesFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListExternalResources, error) {

	var list table.ListExternalResources
	// sql query
	qb, err := er_r.FindAllExternalResourcesBaseQuery(ctx, filter, "`external_resources`.*", suffixes...)
	if err != nil {
		return &list, err
	}
	qb = qb.Where(sq.Eq{"`external_resources`.`created_by`": createdBy})

	if qb, err = er_r.AddPagination(ctx, qb, pagination); err != nil {
		return &list, err
	}

	// run query
	if err = er_r.DB.Select(ctx, &list.Data, qb); err != nil {
		return &list, err
	}

	if pagination == nil || pagination.PerPage == nil || pagination.Page == nil {
		list.TotalCount = len(list.Data)
		return &list, nil
	}

	var listMeta internal.ListMetadata
	if qb, err = er_r.FindAllExternalResourcesBaseQuery(ctx, filter, "COUNT(1) AS count"); err != nil {
		return &list, err
	}
	if filter != nil && len(filter.GroupBys) > 0 {
		qb = sq.Select("COUNT(1) AS count").FromSelect(qb, "a")
	}
	qb = qb.Where(sq.Eq{"`external_resources`.`created_by`": createdBy})
	if err = er_r.DB.Get(ctx, &listMeta, qb); err != nil {
		return &list, err
	}

	list.TotalCount = listMeta.Count

	return &list, nil

}

func (er_r *ExternalResourcesRepository) ExternalResourcesByEmail(ctx context.Context, email string, filter *table.ExternalResourcesFilter, pagination *internal.Pagination) (*table.ListExternalResources, error) {
	return er_r.ExternalResourcesByEmailWithSuffix(ctx, email, filter, pagination)
}

func (er_r *ExternalResourcesRepository) ExternalResourcesByEmailWithSuffix(ctx context.Context, email string, filter *table.ExternalResourcesFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListExternalResources, error) {

	var list table.ListExternalResources
	// sql query
	qb, err := er_r.FindAllExternalResourcesBaseQuery(ctx, filter, "`external_resources`.*", suffixes...)
	if err != nil {
		return &list, err
	}
	qb = qb.Where(sq.Eq{"`external_resources`.`email`": email})

	if qb, err = er_r.AddPagination(ctx, qb, pagination); err != nil {
		return &list, err
	}

	// run query
	if err = er_r.DB.Select(ctx, &list.Data, qb); err != nil {
		return &list, err
	}

	if pagination == nil || pagination.PerPage == nil || pagination.Page == nil {
		list.TotalCount = len(list.Data)
		return &list, nil
	}

	var listMeta internal.ListMetadata
	if qb, err = er_r.FindAllExternalResourcesBaseQuery(ctx, filter, "COUNT(1) AS count"); err != nil {
		return &list, err
	}
	if filter != nil && len(filter.GroupBys) > 0 {
		qb = sq.Select("COUNT(1) AS count").FromSelect(qb, "a")
	}
	qb = qb.Where(sq.Eq{"`external_resources`.`email`": email})
	if err = er_r.DB.Get(ctx, &listMeta, qb); err != nil {
		return &list, err
	}

	list.TotalCount = listMeta.Count

	return &list, nil

}

func (er_r *ExternalResourcesRepository) ExternalResourcesByName(ctx context.Context, name string, filter *table.ExternalResourcesFilter, pagination *internal.Pagination) (*table.ListExternalResources, error) {
	return er_r.ExternalResourcesByNameWithSuffix(ctx, name, filter, pagination)
}

func (er_r *ExternalResourcesRepository) ExternalResourcesByNameWithSuffix(ctx context.Context, name string, filter *table.ExternalResourcesFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListExternalResources, error) {

	var list table.ListExternalResources
	// sql query
	qb, err := er_r.FindAllExternalResourcesBaseQuery(ctx, filter, "`external_resources`.*", suffixes...)
	if err != nil {
		return &list, err
	}
	qb = qb.Where(sq.Eq{"`external_resources`.`name`": name})

	if qb, err = er_r.AddPagination(ctx, qb, pagination); err != nil {
		return &list, err
	}

	// run query
	if err = er_r.DB.Select(ctx, &list.Data, qb); err != nil {
		return &list, err
	}

	if pagination == nil || pagination.PerPage == nil || pagination.Page == nil {
		list.TotalCount = len(list.Data)
		return &list, nil
	}

	var listMeta internal.ListMetadata
	if qb, err = er_r.FindAllExternalResourcesBaseQuery(ctx, filter, "COUNT(1) AS count"); err != nil {
		return &list, err
	}
	if filter != nil && len(filter.GroupBys) > 0 {
		qb = sq.Select("COUNT(1) AS count").FromSelect(qb, "a")
	}
	qb = qb.Where(sq.Eq{"`external_resources`.`name`": name})
	if err = er_r.DB.Get(ctx, &listMeta, qb); err != nil {
		return &list, err
	}

	list.TotalCount = listMeta.Count

	return &list, nil

}
func (er_r *ExternalResourcesRepository) ExternalResourcesByID(ctx context.Context, id int, filter *table.ExternalResourcesFilter) (table.ExternalResources, error) {
	return er_r.ExternalResourcesByIDWithSuffix(ctx, id, filter)
}

func (er_r *ExternalResourcesRepository) ExternalResourcesByIDWithSuffix(ctx context.Context, id int, filter *table.ExternalResourcesFilter, suffixes ...sq.Sqlizer) (table.ExternalResources, error) {
	var err error

	// sql query
	qb, err := er_r.FindAllExternalResourcesBaseQuery(ctx, filter, "`external_resources`.*", suffixes...)
	if err != nil {
		return table.ExternalResources{}, err
	}
	qb = qb.Where(sq.Eq{"`external_resources`.`id`": id})

	// run query
	er_ := table.ExternalResources{}
	err = er_r.DB.Get(ctx, &er_, qb)
	if err != nil {
		return table.ExternalResources{}, err
	}
	return er_, nil
}
