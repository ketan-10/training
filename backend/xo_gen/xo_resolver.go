// Code generated by xo. DO NOT EDIT.

package xo_gen

import (
	"github.com/google/wire"
	"github.com/ketan-10/classroom/backend/graphql/gen"
	"github.com/ketan-10/classroom/backend/xo_gen/repo"
	"github.com/ketan-10/classroom/backend/xo_gen/rlts"
)

type XoResolver struct {
	repo.IAttendancesRepository
	rlts.IAttendancesRltsRepository
	repo.IExternalResourcesRepository
	rlts.IExternalResourcesRltsRepository
	repo.IInternalResourcesRepository
	rlts.IInternalResourcesRltsRepository
	repo.IRegistrationsRepository
	rlts.IRegistrationsRltsRepository
	repo.ITrainerTrainingMappingRepository
	rlts.ITrainerTrainingMappingRltsRepository
	repo.ITrainingRepository
	rlts.ITrainingRltsRepository
	repo.ITrainingEventRepository
	rlts.ITrainingEventRltsRepository
	repo.IUserRepository
	rlts.IUserRltsRepository
}

//type IXoResolver interface {
//    Attendances() gen.AttendancesResolver
//    ExternalResources() gen.ExternalResourcesResolver
//    InternalResources() gen.InternalResourcesResolver
//    Registrations() gen.RegistrationsResolver
//    TrainerTrainingMapping() gen.TrainerTrainingMappingResolver
//    Training() gen.TrainingResolver
//    TrainingEvent() gen.TrainingEventResolver
//    User() gen.UserResolver
//}

var NewXoResolver = wire.NewSet(
	wire.Struct(new(XoResolver), "*"),

// wire.Bind(new(IXoResolver), new(XoResolver)),
)

func (r *XoResolver) Attendances() gen.AttendancesResolver {
	return r.IAttendancesRltsRepository
}
func (r *XoResolver) ExternalResources() gen.ExternalResourcesResolver {
	return r.IExternalResourcesRltsRepository
}
func (r *XoResolver) InternalResources() gen.InternalResourcesResolver {
	return r.IInternalResourcesRltsRepository
}
func (r *XoResolver) Registrations() gen.RegistrationsResolver {
	return r.IRegistrationsRltsRepository
}
func (r *XoResolver) TrainerTrainingMapping() gen.TrainerTrainingMappingResolver {
	return r.ITrainerTrainingMappingRltsRepository
}
func (r *XoResolver) Training() gen.TrainingResolver {
	return r.ITrainingRltsRepository
}
func (r *XoResolver) TrainingEvent() gen.TrainingEventResolver {
	return r.ITrainingEventRltsRepository
}
func (r *XoResolver) User() gen.UserResolver {
	return r.IUserRltsRepository
}
