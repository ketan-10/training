// Code generated by xo. DO NOT EDIT.

package enum

import (
	"database/sql/driver"
	"errors"
	"io"
)

type UserRole uint16

const (
	UserRoleInternalTeam UserRole = iota

	UserRoleManager UserRole = iota
)

func (ur UserRole) String() string {
	var value string

	switch ur {

	case UserRoleInternalTeam:
		value = "internal_team"

	case UserRoleManager:
		value = "manager"

	}

	return value
}

func (ur UserRole) GoString() string {
	return ur.String()
}

// MarshalGQL implements the graphql.Marshaler interface
func (ur UserRole) MarshalGQL(w io.Writer) {
	w.Write([]byte(`"` + ur.String() + `"`))
}

// UnmarshalGQL implements the graphql.Marshaler interface
func (ur *UserRole) UnmarshalGQL(v interface{}) error {
	if str, ok := v.(string); ok {
		return ur.UnmarshalText([]byte(str))
	}
	return errors.New("ErrInvalidEnumGraphQL")
}

// MarshalText marshals UserRole into text.
func (ur UserRole) MarshalText() ([]byte, error) {
	return []byte(ur.String()), nil
}

// UnmarshalText unmarshals UserRole from text.
func (ur *UserRole) UnmarshalText(text []byte) error {
	switch string(text) {
	case "internal_team":
		*ur = UserRoleInternalTeam

	case "manager":
		*ur = UserRoleManager

	default:
		return errors.New("ErrInvalidEnumGraphQL_UserRole")
	}

	return nil
}

// Value satisfies the sql/driver.Valuer interface for UserRole.
func (ur UserRole) Value() (driver.Value, error) {
	return ur.String(), nil
}

// Value satisfies the sql/driver.Valuer interface for UserRole.
func (ur UserRole) Ptr() *UserRole {
	return &ur
}

// Scan satisfies the database/sql.Scanner interface for UserRole.
func (ur *UserRole) Scan(src interface{}) error {
	buf, ok := src.([]byte)
	if !ok {
		return errors.New("ErrInvalidEnumScan_UserRole")
	}

	return ur.UnmarshalText(buf)
}
