// Code generated by xo. DO NOT EDIT.

package enum

import (
	"database/sql/driver"
	"errors"
	"io"
)

type TrainingEventStatus uint16

const (
	TrainingEventStatusCompleted TrainingEventStatus = iota

	TrainingEventStatusPending TrainingEventStatus = iota

	TrainingEventStatusCanceled TrainingEventStatus = iota

	TrainingEventStatusPostponed TrainingEventStatus = iota

	TrainingEventStatusRejected TrainingEventStatus = iota
)

func (tes TrainingEventStatus) String() string {
	var value string

	switch tes {

	case TrainingEventStatusCompleted:
		value = "completed"

	case TrainingEventStatusPending:
		value = "pending"

	case TrainingEventStatusCanceled:
		value = "canceled"

	case TrainingEventStatusPostponed:
		value = "postponed"

	case TrainingEventStatusRejected:
		value = "rejected"

	}

	return value
}

func (tes TrainingEventStatus) GoString() string {
	return tes.String()
}

// MarshalGQL implements the graphql.Marshaler interface
func (tes TrainingEventStatus) MarshalGQL(w io.Writer) {
	w.Write([]byte(`"` + tes.String() + `"`))
}

// UnmarshalGQL implements the graphql.Marshaler interface
func (tes *TrainingEventStatus) UnmarshalGQL(v interface{}) error {
	if str, ok := v.(string); ok {
		return tes.UnmarshalText([]byte(str))
	}
	return errors.New("ErrInvalidEnumGraphQL")
}

// MarshalText marshals TrainingEventStatus into text.
func (tes TrainingEventStatus) MarshalText() ([]byte, error) {
	return []byte(tes.String()), nil
}

// UnmarshalText unmarshals TrainingEventStatus from text.
func (tes *TrainingEventStatus) UnmarshalText(text []byte) error {
	switch string(text) {
	case "completed":
		*tes = TrainingEventStatusCompleted

	case "pending":
		*tes = TrainingEventStatusPending

	case "canceled":
		*tes = TrainingEventStatusCanceled

	case "postponed":
		*tes = TrainingEventStatusPostponed

	case "rejected":
		*tes = TrainingEventStatusRejected

	default:
		return errors.New("ErrInvalidEnumGraphQL_TrainingEventStatus")
	}

	return nil
}

// Value satisfies the sql/driver.Valuer interface for TrainingEventStatus.
func (tes TrainingEventStatus) Value() (driver.Value, error) {
	return tes.String(), nil
}

// Value satisfies the sql/driver.Valuer interface for TrainingEventStatus.
func (tes TrainingEventStatus) Ptr() *TrainingEventStatus {
	return &tes
}

// Scan satisfies the database/sql.Scanner interface for TrainingEventStatus.
func (tes *TrainingEventStatus) Scan(src interface{}) error {
	buf, ok := src.([]byte)
	if !ok {
		return errors.New("ErrInvalidEnumScan_TrainingEventStatus")
	}

	return tes.UnmarshalText(buf)
}
