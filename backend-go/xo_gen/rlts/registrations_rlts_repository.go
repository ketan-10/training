// Code generated by xo. DO NOT EDIT.

package rlts

import (
	"context"

	"github.com/google/wire"
	"github.com/ketan-10/training/backend/internal"
	"github.com/ketan-10/training/backend/xo_gen/repo"
	"github.com/ketan-10/training/backend/xo_gen/table"
)

type IRegistrationsRltsRepository interface {

	// This Table Pointing to Other Table!!!, ManyToOne <- As Many records from other table can point to this table one record
	TrainingByFkTraining(ctx context.Context, obj *table.Registrations, filter *table.TrainingFilter) (*table.Training, error)
	StudentsByFkStudent(ctx context.Context, obj *table.Registrations, filter *table.StudentsFilter) (*table.Students, error)

	//  Other Table Pointing to This Table!!!, OneToMany <- As This Table record can point to Multiple Other table record

}

type RegistrationsRltsRepository struct {
	TrainingRepository repo.ITrainingRepository

	StudentsRepository repo.IStudentsRepository
}

var NewRegistrationsRltsRepository = wire.NewSet(
	wire.Struct(new(RegistrationsRltsRepository), "*"),
	wire.Bind(new(IRegistrationsRltsRepository), new(*RegistrationsRltsRepository)),
)

func (rr *RegistrationsRltsRepository) TrainingByFkTraining(ctx context.Context, obj *table.Registrations, filter *table.TrainingFilter) (*table.Training, error) {
	if obj == nil {
		return nil, nil
	}

	if filter == nil {
		filter = &table.TrainingFilter{}
	}

	filter.AddID(internal.Eq, obj.FkTraining)
	result, err := rr.TrainingRepository.FindAllTraining(ctx, filter, nil)

	if err != nil {
		return nil, err
	}

	if result.TotalCount == 0 {
		return nil, nil
	}
	return &result.Data[0], nil
}
func (rr *RegistrationsRltsRepository) StudentsByFkStudent(ctx context.Context, obj *table.Registrations, filter *table.StudentsFilter) (*table.Students, error) {
	if obj == nil {
		return nil, nil
	}

	if filter == nil {
		filter = &table.StudentsFilter{}
	}

	filter.AddID(internal.Eq, obj.FkStudent)
	result, err := rr.StudentsRepository.FindAllStudents(ctx, filter, nil)

	if err != nil {
		return nil, err
	}

	if result.TotalCount == 0 {
		return nil, nil
	}
	return &result.Data[0], nil
}
