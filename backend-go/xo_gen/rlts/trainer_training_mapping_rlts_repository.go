// Code generated by xo. DO NOT EDIT.

package rlts

import (
	"context"

	"github.com/google/wire"
	"github.com/ketan-10/training/backend/internal"
	"github.com/ketan-10/training/backend/xo_gen/repo"
	"github.com/ketan-10/training/backend/xo_gen/table"
)

type ITrainerTrainingMappingRltsRepository interface {

	// This Table Pointing to Other Table!!!, ManyToOne <- As Many records from other table can point to this table one record
	TrainingEventByFkTrainingEvent(ctx context.Context, obj *table.TrainerTrainingMapping, filter *table.TrainingEventFilter) (*table.TrainingEvent, error)
	TrainersByFkTrainer(ctx context.Context, obj *table.TrainerTrainingMapping, filter *table.TrainersFilter) (*table.Trainers, error)
	StudentsByFkStudent(ctx context.Context, obj *table.TrainerTrainingMapping, filter *table.StudentsFilter) (*table.Students, error)

	//  Other Table Pointing to This Table!!!, OneToMany <- As This Table record can point to Multiple Other table record

}

type TrainerTrainingMappingRltsRepository struct {
	TrainingEventRepository repo.ITrainingEventRepository

	TrainersRepository repo.ITrainersRepository

	StudentsRepository repo.IStudentsRepository
}

var NewTrainerTrainingMappingRltsRepository = wire.NewSet(
	wire.Struct(new(TrainerTrainingMappingRltsRepository), "*"),
	wire.Bind(new(ITrainerTrainingMappingRltsRepository), new(*TrainerTrainingMappingRltsRepository)),
)

func (ttmr *TrainerTrainingMappingRltsRepository) TrainingEventByFkTrainingEvent(ctx context.Context, obj *table.TrainerTrainingMapping, filter *table.TrainingEventFilter) (*table.TrainingEvent, error) {
	if obj == nil {
		return nil, nil
	}

	if filter == nil {
		filter = &table.TrainingEventFilter{}
	}

	filter.AddID(internal.Eq, obj.FkTrainingEvent)
	result, err := ttmr.TrainingEventRepository.FindAllTrainingEvent(ctx, filter, nil)

	if err != nil {
		return nil, err
	}

	if result.TotalCount == 0 {
		return nil, nil
	}
	return &result.Data[0], nil
}
func (ttmr *TrainerTrainingMappingRltsRepository) TrainersByFkTrainer(ctx context.Context, obj *table.TrainerTrainingMapping, filter *table.TrainersFilter) (*table.Trainers, error) {
	if obj == nil {
		return nil, nil
	}

	if filter == nil {
		filter = &table.TrainersFilter{}
	}

	filter.AddID(internal.Eq, obj.FkTrainer)
	result, err := ttmr.TrainersRepository.FindAllTrainers(ctx, filter, nil)

	if err != nil {
		return nil, err
	}

	if result.TotalCount == 0 {
		return nil, nil
	}
	return &result.Data[0], nil
}
func (ttmr *TrainerTrainingMappingRltsRepository) StudentsByFkStudent(ctx context.Context, obj *table.TrainerTrainingMapping, filter *table.StudentsFilter) (*table.Students, error) {
	if obj == nil {
		return nil, nil
	}

	if filter == nil {
		filter = &table.StudentsFilter{}
	}

	filter.AddID(internal.Eq, obj.FkStudent)
	result, err := ttmr.StudentsRepository.FindAllStudents(ctx, filter, nil)

	if err != nil {
		return nil, err
	}

	if result.TotalCount == 0 {
		return nil, nil
	}
	return &result.Data[0], nil
}
