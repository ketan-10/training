// Code generated by xo. DO NOT EDIT.

package rlts

import (
	"context"

	"github.com/google/wire"
	"github.com/ketan-10/training/backend/internal"
	"github.com/ketan-10/training/backend/xo_gen/repo"
	"github.com/ketan-10/training/backend/xo_gen/table"
)

type ITrainingRltsRepository interface {

	// This Table Pointing to Other Table!!!, ManyToOne <- As Many records from other table can point to this table one record
	UserByRequestedBy(ctx context.Context, obj *table.Training, filter *table.UserFilter) (*table.User, error)
	UserByCreatedBy(ctx context.Context, obj *table.Training, filter *table.UserFilter) (*table.User, error)

	//  Other Table Pointing to This Table!!!, OneToMany <- As This Table record can point to Multiple Other table record
	RegistrationsByFkTraining(ctx context.Context, obj *table.Training, filter *table.RegistrationsFilter, pagination *internal.Pagination) (*table.ListRegistrations, error)
	TrainingEventByFkTraining(ctx context.Context, obj *table.Training, filter *table.TrainingEventFilter, pagination *internal.Pagination) (*table.ListTrainingEvent, error)
}

type TrainingRltsRepository struct {
	UserRepository repo.IUserRepository

	RegistrationsRepository repo.IRegistrationsRepository

	TrainingEventRepository repo.ITrainingEventRepository
}

var NewTrainingRltsRepository = wire.NewSet(
	wire.Struct(new(TrainingRltsRepository), "*"),
	wire.Bind(new(ITrainingRltsRepository), new(*TrainingRltsRepository)),
)

func (tr *TrainingRltsRepository) UserByRequestedBy(ctx context.Context, obj *table.Training, filter *table.UserFilter) (*table.User, error) {
	if obj == nil {
		return nil, nil
	}

	if filter == nil {
		filter = &table.UserFilter{}
	}

	filter.AddID(internal.Eq, obj.RequestedBy)
	result, err := tr.UserRepository.FindAllUser(ctx, filter, nil)

	if err != nil {
		return nil, err
	}

	if result.TotalCount == 0 {
		return nil, nil
	}
	return &result.Data[0], nil
}
func (tr *TrainingRltsRepository) UserByCreatedBy(ctx context.Context, obj *table.Training, filter *table.UserFilter) (*table.User, error) {
	if obj == nil {
		return nil, nil
	}

	if filter == nil {
		filter = &table.UserFilter{}
	}

	filter.AddID(internal.Eq, obj.CreatedBy)
	result, err := tr.UserRepository.FindAllUser(ctx, filter, nil)

	if err != nil {
		return nil, err
	}

	if result.TotalCount == 0 {
		return nil, nil
	}
	return &result.Data[0], nil
}
func (tr *TrainingRltsRepository) RegistrationsByFkTraining(ctx context.Context, obj *table.Training, filter *table.RegistrationsFilter, pagination *internal.Pagination) (*table.ListRegistrations, error) {
	if obj == nil {
		return &table.ListRegistrations{}, nil
	}
	return tr.RegistrationsRepository.RegistrationsByFkTraining(ctx, obj.ID, filter, pagination)
}
func (tr *TrainingRltsRepository) TrainingEventByFkTraining(ctx context.Context, obj *table.Training, filter *table.TrainingEventFilter, pagination *internal.Pagination) (*table.ListTrainingEvent, error) {
	if obj == nil {
		return &table.ListTrainingEvent{}, nil
	}
	return tr.TrainingEventRepository.TrainingEventByFkTraining(ctx, obj.ID, filter, pagination)
}
