// Code generated by xo. DO NOT EDIT.

package table

import (
	"database/sql"

	sq "github.com/elgris/sqrl"
	"github.com/ketan-10/training/backend/internal"
	"github.com/pkg/errors"
)

type Trainers struct {
	ID          int            `json:"id" db:"id"`
	UUID        sql.NullString `json:"uuid" db:"uuid"`
	Name        string         `json:"name" db:"name"`
	Email       string         `json:"email" db:"email"`
	MobilePhone string         `json:"mobile_phone" db:"mobile_phone"`
	Designation string         `json:"designation" db:"designation"`
	Active      bool           `json:"active" db:"active"`
	CreatedAt   sql.NullTime   `json:"created_at" db:"created_at"`
	UpdatedAt   sql.NullTime   `json:"updated_at" db:"updated_at"`
	CreatedBy   sql.NullInt64  `json:"created_by" db:"created_by"`
}

type TrainersFilter struct {
	ID          internal.FilterOnField
	UUID        internal.FilterOnField
	Name        internal.FilterOnField
	Email       internal.FilterOnField
	MobilePhone internal.FilterOnField
	Designation internal.FilterOnField
	Active      internal.FilterOnField
	CreatedAt   internal.FilterOnField
	UpdatedAt   internal.FilterOnField
	CreatedBy   internal.FilterOnField
	Wheres      []sq.Sqlizer
	Joins       []sq.Sqlizer
	LeftJoins   []sq.Sqlizer
	GroupBys    []string
	Havings     []sq.Sqlizer
}

func (f *TrainersFilter) NewFilter() interface{} {
	if f == nil {
		return &TrainersFilter{}
	}
	return f
}

func (f *TrainersFilter) TableName() string {
	return "`trainers`"
}

func (f *TrainersFilter) ModuleName() string {
	return "trainers"
}

func (f *TrainersFilter) IsNil() bool {
	return f == nil
}
func (f *TrainersFilter) AddID(filterType internal.FilterType, v interface{}) {
	f.ID = append(f.ID, map[internal.FilterType]interface{}{filterType: v})
}
func (f *TrainersFilter) AddUUID(filterType internal.FilterType, v interface{}) {
	f.UUID = append(f.UUID, map[internal.FilterType]interface{}{filterType: v})
}
func (f *TrainersFilter) AddName(filterType internal.FilterType, v interface{}) {
	f.Name = append(f.Name, map[internal.FilterType]interface{}{filterType: v})
}
func (f *TrainersFilter) AddEmail(filterType internal.FilterType, v interface{}) {
	f.Email = append(f.Email, map[internal.FilterType]interface{}{filterType: v})
}
func (f *TrainersFilter) AddMobilePhone(filterType internal.FilterType, v interface{}) {
	f.MobilePhone = append(f.MobilePhone, map[internal.FilterType]interface{}{filterType: v})
}
func (f *TrainersFilter) AddDesignation(filterType internal.FilterType, v interface{}) {
	f.Designation = append(f.Designation, map[internal.FilterType]interface{}{filterType: v})
}
func (f *TrainersFilter) AddActive(filterType internal.FilterType, v interface{}) {
	f.Active = append(f.Active, map[internal.FilterType]interface{}{filterType: v})
}
func (f *TrainersFilter) AddCreatedAt(filterType internal.FilterType, v interface{}) {
	f.CreatedAt = append(f.CreatedAt, map[internal.FilterType]interface{}{filterType: v})
}
func (f *TrainersFilter) AddUpdatedAt(filterType internal.FilterType, v interface{}) {
	f.UpdatedAt = append(f.UpdatedAt, map[internal.FilterType]interface{}{filterType: v})
}
func (f *TrainersFilter) AddCreatedBy(filterType internal.FilterType, v interface{}) {
	f.CreatedBy = append(f.CreatedBy, map[internal.FilterType]interface{}{filterType: v})
}

func (f *TrainersFilter) Where(v sq.Sqlizer) *TrainersFilter {
	f.Wheres = append(f.Wheres, v)
	return f
}

func (f *TrainersFilter) Join(j sq.Sqlizer) *TrainersFilter {
	f.Joins = append(f.Joins, j)
	return f
}

func (f *TrainersFilter) LeftJoin(j sq.Sqlizer) *TrainersFilter {
	f.LeftJoins = append(f.LeftJoins, j)
	return f
}

func (f *TrainersFilter) GroupBy(gb string) *TrainersFilter {
	f.GroupBys = append(f.GroupBys, gb)
	return f
}

func (f *TrainersFilter) Having(h sq.Sqlizer) *TrainersFilter {
	f.Havings = append(f.Havings, h)
	return f
}

type TrainersCreate struct {
	UUID        sql.NullString `json:"uuid" db:"uuid"`
	Name        string         `json:"name" db:"name"`
	Email       string         `json:"email" db:"email"`
	MobilePhone string         `json:"mobile_phone" db:"mobile_phone"`
	Designation string         `json:"designation" db:"designation"`
	CreatedBy   sql.NullInt64  `json:"created_by" db:"created_by"`
}

// TODO: We have to exclude AutoGenerated fields
// For now I am keeping it in, as not sure how it affects
type TrainersUpdate struct {
	UUID        *sql.NullString // uuid
	Name        *string         // name
	Email       *string         // email
	MobilePhone *string         // mobile_phone
	Designation *string         // designation
	Active      *bool           // active
	CreatedBy   *sql.NullInt64  // created_by
}

// helper functions
func (u *TrainersUpdate) ToTrainersCreate() (res TrainersCreate, err error) {
	if u.UUID != nil {
		res.UUID = *u.UUID
	}
	if u.Name != nil {
		res.Name = *u.Name
	} else {
		return res, errors.New("Value Can not be NULL")
	}
	if u.Email != nil {
		res.Email = *u.Email
	} else {
		return res, errors.New("Value Can not be NULL")
	}
	if u.MobilePhone != nil {
		res.MobilePhone = *u.MobilePhone
	} else {
		return res, errors.New("Value Can not be NULL")
	}
	if u.Designation != nil {
		res.Designation = *u.Designation
	} else {
		return res, errors.New("Value Can not be NULL")
	}
	if u.CreatedBy != nil {
		res.CreatedBy = *u.CreatedBy
	}
	return res, nil
}

type ListTrainers struct {
	TotalCount int
	Data       []Trainers
}

func (l *ListTrainers) GetAllID() []int {
	var res []int
	for _, item := range l.Data {
		res = append(res, item.ID)
	}
	return res
}
func (l *ListTrainers) GetAllUUID() []sql.NullString {
	var res []sql.NullString
	for _, item := range l.Data {
		res = append(res, item.UUID)
	}
	return res
}
func (l *ListTrainers) GetAllName() []string {
	var res []string
	for _, item := range l.Data {
		res = append(res, item.Name)
	}
	return res
}
func (l *ListTrainers) GetAllEmail() []string {
	var res []string
	for _, item := range l.Data {
		res = append(res, item.Email)
	}
	return res
}
func (l *ListTrainers) GetAllMobilePhone() []string {
	var res []string
	for _, item := range l.Data {
		res = append(res, item.MobilePhone)
	}
	return res
}
func (l *ListTrainers) GetAllDesignation() []string {
	var res []string
	for _, item := range l.Data {
		res = append(res, item.Designation)
	}
	return res
}
func (l *ListTrainers) GetAllActive() []bool {
	var res []bool
	for _, item := range l.Data {
		res = append(res, item.Active)
	}
	return res
}
func (l *ListTrainers) GetAllCreatedAt() []sql.NullTime {
	var res []sql.NullTime
	for _, item := range l.Data {
		res = append(res, item.CreatedAt)
	}
	return res
}
func (l *ListTrainers) GetAllUpdatedAt() []sql.NullTime {
	var res []sql.NullTime
	for _, item := range l.Data {
		res = append(res, item.UpdatedAt)
	}
	return res
}
func (l *ListTrainers) GetAllCreatedBy() []sql.NullInt64 {
	var res []sql.NullInt64
	for _, item := range l.Data {
		res = append(res, item.CreatedBy)
	}
	return res
}

func (l *ListTrainers) Filter(f func(item Trainers) bool) (res ListTrainers) {
	for _, item := range l.Data {
		if f(item) {
			res.Data = append(res.Data, item)
		}
	}
	res.TotalCount = len(res.Data)
	return res
}

func (l *ListTrainers) Find(f func(item Trainers) bool) (res Trainers, found bool) {
	for _, item := range l.Data {
		if f(item) {
			return item, true
		}
	}
	return Trainers{}, false
}

func (l *ListTrainers) MapByName() (m map[string]ListTrainers) {
	m = make(map[string]ListTrainers)
	for _, item := range l.Data {
		list := m[item.Name]
		list.Data = append(list.Data, item)

		m[item.Name] = list
	}
	for k, v := range m {
		v.TotalCount = len(v.Data)
		m[k] = v
	}
	return m
}

func (l *ListTrainers) MapByCreatedBy() (m map[sql.NullInt64]ListTrainers) {
	m = make(map[sql.NullInt64]ListTrainers)
	for _, item := range l.Data {
		list := m[item.CreatedBy]
		list.Data = append(list.Data, item)

		m[item.CreatedBy] = list
	}
	for k, v := range m {
		v.TotalCount = len(v.Data)
		m[k] = v
	}
	return m
}

func (l *ListTrainers) MapByID() (m map[int]Trainers) {
	m = make(map[int]Trainers, len(l.Data))
	for _, item := range l.Data {
		m[item.ID] = item
	}
	return m
}

func (l *ListTrainers) MapByEmail() (m map[string]ListTrainers) {
	m = make(map[string]ListTrainers)
	for _, item := range l.Data {
		list := m[item.Email]
		list.Data = append(list.Data, item)

		m[item.Email] = list
	}
	for k, v := range m {
		v.TotalCount = len(v.Data)
		m[k] = v
	}
	return m
}
