// Code generated by xo. DO NOT EDIT.

package repo

import (
	"context"

	sq "github.com/elgris/sqrl"
	"github.com/google/wire"
	"github.com/ketan-10/training/backend/internal"
	"github.com/ketan-10/training/backend/xo_gen/table"
)

type IAttendancesRepository interface {
	IAttendancesRepositoryQueryBuilder

	InsertAttendances(ctx context.Context, a table.AttendancesCreate) (*table.Attendances, error)
	InsertAttendancesWithSuffix(ctx context.Context, a table.AttendancesCreate, suffix sq.Sqlizer) (*table.Attendances, error)
	InsertAttendancesIDResult(ctx context.Context, a table.AttendancesCreate, suffix sq.Sqlizer) (int64, error)

	UpdateAttendancesByFields(ctx context.Context, id int, a table.AttendancesUpdate) (*table.Attendances, error)
	UpdateAttendances(ctx context.Context, a table.Attendances) (*table.Attendances, error)

	DeleteAttendances(ctx context.Context, a table.Attendances) error
	DeleteAttendancesByID(ctx context.Context, id int) (bool, error)

	FindAllAttendances(ctx context.Context, a *table.AttendancesFilter, pagination *internal.Pagination) (*table.ListAttendances, error)
	FindAllAttendancesWithSuffix(ctx context.Context, a *table.AttendancesFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListAttendances, error)

	AttendancesByFkStudent(ctx context.Context, fkStudent int, filter *table.AttendancesFilter, pagination *internal.Pagination) (*table.ListAttendances, error)

	AttendancesByFkStudentWithSuffix(ctx context.Context, fkStudent int, filter *table.AttendancesFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListAttendances, error)

	AttendancesByFkTrainingEvent(ctx context.Context, fkTrainingEvent int, filter *table.AttendancesFilter, pagination *internal.Pagination) (*table.ListAttendances, error)

	AttendancesByFkTrainingEventWithSuffix(ctx context.Context, fkTrainingEvent int, filter *table.AttendancesFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListAttendances, error)
	AttendancesByID(ctx context.Context, id int, filter *table.AttendancesFilter) (table.Attendances, error)

	AttendancesByIDWithSuffix(ctx context.Context, id int, filter *table.AttendancesFilter, suffixes ...sq.Sqlizer) (table.Attendances, error)
}

type IAttendancesRepositoryQueryBuilder interface {
	FindAllAttendancesBaseQuery(ctx context.Context, filter *table.AttendancesFilter, fields string, suffix ...sq.Sqlizer) (*sq.SelectBuilder, error)
	AddPagination(ctx context.Context, qb *sq.SelectBuilder, pagination *internal.Pagination) (*sq.SelectBuilder, error)
}

type AttendancesRepository struct {
	DB           internal.IDb
	QueryBuilder IAttendancesRepositoryQueryBuilder
}

type AttendancesRepositoryQueryBuilder struct {
}

var NewAttendancesRepository = wire.NewSet(
	wire.Struct(new(AttendancesRepository), "*"),
	wire.Struct(new(AttendancesRepositoryQueryBuilder), "*"),
	wire.Bind(new(IAttendancesRepository), new(*AttendancesRepository)),
	wire.Bind(new(IAttendancesRepositoryQueryBuilder), new(*AttendancesRepositoryQueryBuilder)),
)

func (ar *AttendancesRepository) InsertAttendances(ctx context.Context, a table.AttendancesCreate) (*table.Attendances, error) {
	return ar.InsertAttendancesWithSuffix(ctx, a, nil)
}

func (ar *AttendancesRepository) InsertAttendancesWithSuffix(ctx context.Context, a table.AttendancesCreate, suffix sq.Sqlizer) (*table.Attendances, error) {
	var err error

	id, err := ar.InsertAttendancesIDResult(ctx, a, suffix)
	if err != nil {
		return nil, err
	}
	newa := table.Attendances{}
	qb := sq.Select("*").From(`attendances`)

	qb.Where(sq.Eq{"`id`": id})
	err = ar.DB.Get(ctx, &newa, qb)

	if err != nil {
		return nil, err
	}
	return &newa, nil
}

func (ar *AttendancesRepository) InsertAttendancesIDResult(ctx context.Context, a table.AttendancesCreate, suffix sq.Sqlizer) (int64, error) {
	var err error

	qb := sq.Insert("`attendances`").Columns(
		"`fk_training_event`",
		"`fk_student`",
	).Values(
		a.FkTrainingEvent,
		a.FkStudent,
	)
	if suffix != nil {
		suffixQuery, suffixArgs, suffixErr := suffix.ToSql()
		if suffixErr != nil {
			return 0, suffixErr
		}
		qb.Suffix(suffixQuery, suffixArgs...)
	}

	// run query
	res, err := ar.DB.Exec(ctx, qb)
	if err != nil {
		return 0, err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return 0, err
	}

	return id, nil
}

func (ar *AttendancesRepository) UpdateAttendancesByFields(ctx context.Context, id int, a table.AttendancesUpdate) (*table.Attendances, error) {
	var err error

	updateMap := map[string]interface{}{}
	if a.FkTrainingEvent != nil {
		updateMap["`fk_training_event`"] = *a.FkTrainingEvent
	}
	if a.FkStudent != nil {
		updateMap["`fk_student`"] = *a.FkStudent
	}
	if a.Active != nil {
		updateMap["`active`"] = *a.Active
	}

	qb := sq.Update(`attendances`).SetMap(updateMap).Where(sq.Eq{"`id`": id})

	_, err = ar.DB.Exec(ctx, qb)
	if err != nil {
		return nil, err
	}

	selectQb := sq.Select("*").From("`attendances`")

	selectQb = selectQb.Where(sq.Eq{"`id`": id})

	result := table.Attendances{}
	err = ar.DB.Get(ctx, &result, selectQb)
	if err != nil {
		return nil, err
	}

	return &result, nil

}

func (ar *AttendancesRepository) UpdateAttendances(ctx context.Context, a table.Attendances) (*table.Attendances, error) {
	var err error

	// sql query
	qb := sq.Update("`attendances`").SetMap(map[string]interface{}{
		"`fk_training_event`": a.FkTrainingEvent,
		"`fk_student`":        a.FkStudent,
		"`active`":            a.Active,
	}).Where(sq.Eq{"`id`": a.ID})

	// run query
	_, err = ar.DB.Exec(ctx, qb)
	if err != nil {
		return nil, err
	}

	selectQb := sq.Select("*").From("`attendances`")
	selectQb = selectQb.Where(sq.Eq{"`id`": a.ID})

	result := table.Attendances{}
	err = ar.DB.Get(ctx, &result, selectQb)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (ar *AttendancesRepository) DeleteAttendances(ctx context.Context, a table.Attendances) error {
	_, err := ar.DeleteAttendancesByID(ctx, a.ID)
	return err
}

func (ar *AttendancesRepository) DeleteAttendancesByID(ctx context.Context, id int) (bool, error) {
	var err error

	qb := sq.Update("`attendances`").Set("active", false)

	qb = qb.Where(sq.Eq{"`id`": id})

	_, err = ar.DB.Exec(ctx, qb)
	if err != nil {
		return false, err
	}
	return true, nil
}

func (ar *AttendancesRepository) FindAllAttendancesBaseQuery(ctx context.Context, filter *table.AttendancesFilter, fields string, suffixes ...sq.Sqlizer) (*sq.SelectBuilder, error) {
	return ar.QueryBuilder.FindAllAttendancesBaseQuery(ctx, filter, fields, suffixes...)
}

func (ar *AttendancesRepositoryQueryBuilder) FindAllAttendancesBaseQuery(ctx context.Context, filter *table.AttendancesFilter, fields string, suffixes ...sq.Sqlizer) (*sq.SelectBuilder, error) {
	var err error
	qb := sq.Select(fields).From("`attendances`")
	if filter != nil {
		if qb, err = internal.AddFilter(qb, "`attendances`.`id`", filter.ID); err != nil {
			return qb, err
		}
		if qb, err = internal.AddFilter(qb, "`attendances`.`fk_training_event`", filter.FkTrainingEvent); err != nil {
			return qb, err
		}
		if qb, err = internal.AddFilter(qb, "`attendances`.`fk_student`", filter.FkStudent); err != nil {
			return qb, err
		}
		if filter.Active == nil {
			if qb, err = internal.AddFilter(qb, "`attendances`.`active`", internal.FilterOnField{{internal.Eq: true}}); err != nil {
				return qb, err
			}
		} else {
			if qb, err = internal.AddFilter(qb, "`attendances`.`active`", filter.Active); err != nil {
				return qb, err
			}
		}
		if qb, err = internal.AddFilter(qb, "`attendances`.`created_at`", filter.CreatedAt); err != nil {
			return qb, err
		}
		if qb, err = internal.AddFilter(qb, "`attendances`.`updated_at`", filter.UpdatedAt); err != nil {
			return qb, err
		}
		qb, err = internal.AddAdditionalFilter(qb, filter.Wheres, filter.Joins, filter.LeftJoins, filter.GroupBys, filter.Havings)
		if err != nil {
			return qb, err
		}
	} else {
		if qb, err = internal.AddFilter(qb, "`attendances`.`active`", internal.FilterOnField{{internal.Eq: true}}); err != nil {
			return qb, err
		}
	}

	for _, suffix := range suffixes {
		query, args, err := suffix.ToSql()
		if err != nil {
			return qb, err
		}
		qb.Suffix(query, args...)
	}
	return qb, nil
}

func (ar *AttendancesRepository) AddPagination(ctx context.Context, qb *sq.SelectBuilder, pagination *internal.Pagination) (*sq.SelectBuilder, error) {
	return ar.QueryBuilder.AddPagination(ctx, qb, pagination)
}

func (a *AttendancesRepositoryQueryBuilder) AddPagination(ctx context.Context, qb *sq.SelectBuilder, pagination *internal.Pagination) (*sq.SelectBuilder, error) {
	fields := []string{
		"id",
		"fk_training_event",
		"fk_student",
		"active",
		"created_at",
		"updated_at",
	}
	return internal.AddPagination(qb, pagination, "attendances", fields)
}

func (ar *AttendancesRepository) FindAllAttendances(ctx context.Context, filter *table.AttendancesFilter, pagination *internal.Pagination) (*table.ListAttendances, error) {
	return ar.FindAllAttendancesWithSuffix(ctx, filter, pagination)
}

func (ar *AttendancesRepository) FindAllAttendancesWithSuffix(ctx context.Context, filter *table.AttendancesFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListAttendances, error) {
	var list table.ListAttendances
	qb, err := ar.FindAllAttendancesBaseQuery(ctx, filter, "`attendances`.*", suffixes...)
	if err != nil {
		return &list, err
	}
	qb, err = ar.AddPagination(ctx, qb, pagination)
	if err != nil {
		return &list, err
	}

	err = ar.DB.Select(ctx, &list.Data, qb)

	if err != nil {
		return &list, err
	}

	if pagination == nil || pagination.PerPage == nil || pagination.Page == nil {
		list.TotalCount = len(list.Data)
		return &list, nil
	}

	var listMeta internal.ListMetadata
	if qb, err = ar.FindAllAttendancesBaseQuery(ctx, filter, "COUNT(1) AS count"); err != nil {
		return &table.ListAttendances{}, err
	}
	if filter != nil && len(filter.GroupBys) > 0 {
		qb = sq.Select("COUNT(1) AS count").FromSelect(qb, "a")
	}
	err = ar.DB.Get(ctx, &listMeta, qb)

	list.TotalCount = listMeta.Count

	return &list, err
}

func (ar *AttendancesRepository) AttendancesByFkStudent(ctx context.Context, fkStudent int, filter *table.AttendancesFilter, pagination *internal.Pagination) (*table.ListAttendances, error) {
	return ar.AttendancesByFkStudentWithSuffix(ctx, fkStudent, filter, pagination)
}

func (ar *AttendancesRepository) AttendancesByFkStudentWithSuffix(ctx context.Context, fkStudent int, filter *table.AttendancesFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListAttendances, error) {

	var list table.ListAttendances
	// sql query
	qb, err := ar.FindAllAttendancesBaseQuery(ctx, filter, "`attendances`.*", suffixes...)
	if err != nil {
		return &list, err
	}
	qb = qb.Where(sq.Eq{"`attendances`.`fk_student`": fkStudent})

	if qb, err = ar.AddPagination(ctx, qb, pagination); err != nil {
		return &list, err
	}

	// run query
	if err = ar.DB.Select(ctx, &list.Data, qb); err != nil {
		return &list, err
	}

	if pagination == nil || pagination.PerPage == nil || pagination.Page == nil {
		list.TotalCount = len(list.Data)
		return &list, nil
	}

	var listMeta internal.ListMetadata
	if qb, err = ar.FindAllAttendancesBaseQuery(ctx, filter, "COUNT(1) AS count"); err != nil {
		return &list, err
	}
	if filter != nil && len(filter.GroupBys) > 0 {
		qb = sq.Select("COUNT(1) AS count").FromSelect(qb, "a")
	}
	qb = qb.Where(sq.Eq{"`attendances`.`fk_student`": fkStudent})
	if err = ar.DB.Get(ctx, &listMeta, qb); err != nil {
		return &list, err
	}

	list.TotalCount = listMeta.Count

	return &list, nil

}

func (ar *AttendancesRepository) AttendancesByFkTrainingEvent(ctx context.Context, fkTrainingEvent int, filter *table.AttendancesFilter, pagination *internal.Pagination) (*table.ListAttendances, error) {
	return ar.AttendancesByFkTrainingEventWithSuffix(ctx, fkTrainingEvent, filter, pagination)
}

func (ar *AttendancesRepository) AttendancesByFkTrainingEventWithSuffix(ctx context.Context, fkTrainingEvent int, filter *table.AttendancesFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListAttendances, error) {

	var list table.ListAttendances
	// sql query
	qb, err := ar.FindAllAttendancesBaseQuery(ctx, filter, "`attendances`.*", suffixes...)
	if err != nil {
		return &list, err
	}
	qb = qb.Where(sq.Eq{"`attendances`.`fk_training_event`": fkTrainingEvent})

	if qb, err = ar.AddPagination(ctx, qb, pagination); err != nil {
		return &list, err
	}

	// run query
	if err = ar.DB.Select(ctx, &list.Data, qb); err != nil {
		return &list, err
	}

	if pagination == nil || pagination.PerPage == nil || pagination.Page == nil {
		list.TotalCount = len(list.Data)
		return &list, nil
	}

	var listMeta internal.ListMetadata
	if qb, err = ar.FindAllAttendancesBaseQuery(ctx, filter, "COUNT(1) AS count"); err != nil {
		return &list, err
	}
	if filter != nil && len(filter.GroupBys) > 0 {
		qb = sq.Select("COUNT(1) AS count").FromSelect(qb, "a")
	}
	qb = qb.Where(sq.Eq{"`attendances`.`fk_training_event`": fkTrainingEvent})
	if err = ar.DB.Get(ctx, &listMeta, qb); err != nil {
		return &list, err
	}

	list.TotalCount = listMeta.Count

	return &list, nil

}
func (ar *AttendancesRepository) AttendancesByID(ctx context.Context, id int, filter *table.AttendancesFilter) (table.Attendances, error) {
	return ar.AttendancesByIDWithSuffix(ctx, id, filter)
}

func (ar *AttendancesRepository) AttendancesByIDWithSuffix(ctx context.Context, id int, filter *table.AttendancesFilter, suffixes ...sq.Sqlizer) (table.Attendances, error) {
	var err error

	// sql query
	qb, err := ar.FindAllAttendancesBaseQuery(ctx, filter, "`attendances`.*", suffixes...)
	if err != nil {
		return table.Attendances{}, err
	}
	qb = qb.Where(sq.Eq{"`attendances`.`id`": id})

	// run query
	a := table.Attendances{}
	err = ar.DB.Get(ctx, &a, qb)
	if err != nil {
		return table.Attendances{}, err
	}
	return a, nil
}
