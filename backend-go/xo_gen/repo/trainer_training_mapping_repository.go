// Code generated by xo. DO NOT EDIT.

package repo

import (
	"context"

	sq "github.com/elgris/sqrl"
	"github.com/google/wire"
	"github.com/ketan-10/training/backend/internal"
	"github.com/ketan-10/training/backend/xo_gen/table"
)

type ITrainerTrainingMappingRepository interface {
	ITrainerTrainingMappingRepositoryQueryBuilder

	InsertTrainerTrainingMapping(ctx context.Context, ttm table.TrainerTrainingMappingCreate) (*table.TrainerTrainingMapping, error)
	InsertTrainerTrainingMappingWithSuffix(ctx context.Context, ttm table.TrainerTrainingMappingCreate, suffix sq.Sqlizer) (*table.TrainerTrainingMapping, error)
	InsertTrainerTrainingMappingIDResult(ctx context.Context, ttm table.TrainerTrainingMappingCreate, suffix sq.Sqlizer) (int64, error)

	UpdateTrainerTrainingMappingByFields(ctx context.Context, id int, ttm table.TrainerTrainingMappingUpdate) (*table.TrainerTrainingMapping, error)
	UpdateTrainerTrainingMapping(ctx context.Context, ttm table.TrainerTrainingMapping) (*table.TrainerTrainingMapping, error)

	DeleteTrainerTrainingMapping(ctx context.Context, ttm table.TrainerTrainingMapping) error
	DeleteTrainerTrainingMappingByID(ctx context.Context, id int) (bool, error)

	FindAllTrainerTrainingMapping(ctx context.Context, ttm *table.TrainerTrainingMappingFilter, pagination *internal.Pagination) (*table.ListTrainerTrainingMapping, error)
	FindAllTrainerTrainingMappingWithSuffix(ctx context.Context, ttm *table.TrainerTrainingMappingFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListTrainerTrainingMapping, error)

	TrainerTrainingMappingByFkStudent(ctx context.Context, fkStudent int, filter *table.TrainerTrainingMappingFilter, pagination *internal.Pagination) (*table.ListTrainerTrainingMapping, error)

	TrainerTrainingMappingByFkStudentWithSuffix(ctx context.Context, fkStudent int, filter *table.TrainerTrainingMappingFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListTrainerTrainingMapping, error)

	TrainerTrainingMappingByFkTrainer(ctx context.Context, fkTrainer int, filter *table.TrainerTrainingMappingFilter, pagination *internal.Pagination) (*table.ListTrainerTrainingMapping, error)

	TrainerTrainingMappingByFkTrainerWithSuffix(ctx context.Context, fkTrainer int, filter *table.TrainerTrainingMappingFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListTrainerTrainingMapping, error)

	TrainerTrainingMappingByFkTrainingEvent(ctx context.Context, fkTrainingEvent int, filter *table.TrainerTrainingMappingFilter, pagination *internal.Pagination) (*table.ListTrainerTrainingMapping, error)

	TrainerTrainingMappingByFkTrainingEventWithSuffix(ctx context.Context, fkTrainingEvent int, filter *table.TrainerTrainingMappingFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListTrainerTrainingMapping, error)
	TrainerTrainingMappingByID(ctx context.Context, id int, filter *table.TrainerTrainingMappingFilter) (table.TrainerTrainingMapping, error)

	TrainerTrainingMappingByIDWithSuffix(ctx context.Context, id int, filter *table.TrainerTrainingMappingFilter, suffixes ...sq.Sqlizer) (table.TrainerTrainingMapping, error)
}

type ITrainerTrainingMappingRepositoryQueryBuilder interface {
	FindAllTrainerTrainingMappingBaseQuery(ctx context.Context, filter *table.TrainerTrainingMappingFilter, fields string, suffix ...sq.Sqlizer) (*sq.SelectBuilder, error)
	AddPagination(ctx context.Context, qb *sq.SelectBuilder, pagination *internal.Pagination) (*sq.SelectBuilder, error)
}

type TrainerTrainingMappingRepository struct {
	DB           internal.IDb
	QueryBuilder ITrainerTrainingMappingRepositoryQueryBuilder
}

type TrainerTrainingMappingRepositoryQueryBuilder struct {
}

var NewTrainerTrainingMappingRepository = wire.NewSet(
	wire.Struct(new(TrainerTrainingMappingRepository), "*"),
	wire.Struct(new(TrainerTrainingMappingRepositoryQueryBuilder), "*"),
	wire.Bind(new(ITrainerTrainingMappingRepository), new(*TrainerTrainingMappingRepository)),
	wire.Bind(new(ITrainerTrainingMappingRepositoryQueryBuilder), new(*TrainerTrainingMappingRepositoryQueryBuilder)),
)

func (ttmr *TrainerTrainingMappingRepository) InsertTrainerTrainingMapping(ctx context.Context, ttm table.TrainerTrainingMappingCreate) (*table.TrainerTrainingMapping, error) {
	return ttmr.InsertTrainerTrainingMappingWithSuffix(ctx, ttm, nil)
}

func (ttmr *TrainerTrainingMappingRepository) InsertTrainerTrainingMappingWithSuffix(ctx context.Context, ttm table.TrainerTrainingMappingCreate, suffix sq.Sqlizer) (*table.TrainerTrainingMapping, error) {
	var err error

	id, err := ttmr.InsertTrainerTrainingMappingIDResult(ctx, ttm, suffix)
	if err != nil {
		return nil, err
	}
	newttm := table.TrainerTrainingMapping{}
	qb := sq.Select("*").From(`trainer_training_mapping`)

	qb.Where(sq.Eq{"`id`": id})
	err = ttmr.DB.Get(ctx, &newttm, qb)

	if err != nil {
		return nil, err
	}
	return &newttm, nil
}

func (ttmr *TrainerTrainingMappingRepository) InsertTrainerTrainingMappingIDResult(ctx context.Context, ttm table.TrainerTrainingMappingCreate, suffix sq.Sqlizer) (int64, error) {
	var err error

	qb := sq.Insert("`trainer_training_mapping`").Columns(
		"`fk_training_event`",
		"`fk_trainer`",
		"`fk_student`",
	).Values(
		ttm.FkTrainingEvent,
		ttm.FkTrainer,
		ttm.FkStudent,
	)
	if suffix != nil {
		suffixQuery, suffixArgs, suffixErr := suffix.ToSql()
		if suffixErr != nil {
			return 0, suffixErr
		}
		qb.Suffix(suffixQuery, suffixArgs...)
	}

	// run query
	res, err := ttmr.DB.Exec(ctx, qb)
	if err != nil {
		return 0, err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return 0, err
	}

	return id, nil
}

func (ttmr *TrainerTrainingMappingRepository) UpdateTrainerTrainingMappingByFields(ctx context.Context, id int, ttm table.TrainerTrainingMappingUpdate) (*table.TrainerTrainingMapping, error) {
	var err error

	updateMap := map[string]interface{}{}
	if ttm.FkTrainingEvent != nil {
		updateMap["`fk_training_event`"] = *ttm.FkTrainingEvent
	}
	if ttm.FkTrainer != nil {
		updateMap["`fk_trainer`"] = *ttm.FkTrainer
	}
	if ttm.FkStudent != nil {
		updateMap["`fk_student`"] = *ttm.FkStudent
	}
	if ttm.Active != nil {
		updateMap["`active`"] = *ttm.Active
	}

	qb := sq.Update(`trainer_training_mapping`).SetMap(updateMap).Where(sq.Eq{"`id`": id})

	_, err = ttmr.DB.Exec(ctx, qb)
	if err != nil {
		return nil, err
	}

	selectQb := sq.Select("*").From("`trainer_training_mapping`")

	selectQb = selectQb.Where(sq.Eq{"`id`": id})

	result := table.TrainerTrainingMapping{}
	err = ttmr.DB.Get(ctx, &result, selectQb)
	if err != nil {
		return nil, err
	}

	return &result, nil

}

func (ttmr *TrainerTrainingMappingRepository) UpdateTrainerTrainingMapping(ctx context.Context, ttm table.TrainerTrainingMapping) (*table.TrainerTrainingMapping, error) {
	var err error

	// sql query
	qb := sq.Update("`trainer_training_mapping`").SetMap(map[string]interface{}{
		"`fk_training_event`": ttm.FkTrainingEvent,
		"`fk_trainer`":        ttm.FkTrainer,
		"`fk_student`":        ttm.FkStudent,
		"`active`":            ttm.Active,
	}).Where(sq.Eq{"`id`": ttm.ID})

	// run query
	_, err = ttmr.DB.Exec(ctx, qb)
	if err != nil {
		return nil, err
	}

	selectQb := sq.Select("*").From("`trainer_training_mapping`")
	selectQb = selectQb.Where(sq.Eq{"`id`": ttm.ID})

	result := table.TrainerTrainingMapping{}
	err = ttmr.DB.Get(ctx, &result, selectQb)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (ttmr *TrainerTrainingMappingRepository) DeleteTrainerTrainingMapping(ctx context.Context, ttm table.TrainerTrainingMapping) error {
	_, err := ttmr.DeleteTrainerTrainingMappingByID(ctx, ttm.ID)
	return err
}

func (ttmr *TrainerTrainingMappingRepository) DeleteTrainerTrainingMappingByID(ctx context.Context, id int) (bool, error) {
	var err error

	qb := sq.Update("`trainer_training_mapping`").Set("active", false)

	qb = qb.Where(sq.Eq{"`id`": id})

	_, err = ttmr.DB.Exec(ctx, qb)
	if err != nil {
		return false, err
	}
	return true, nil
}

func (ttmr *TrainerTrainingMappingRepository) FindAllTrainerTrainingMappingBaseQuery(ctx context.Context, filter *table.TrainerTrainingMappingFilter, fields string, suffixes ...sq.Sqlizer) (*sq.SelectBuilder, error) {
	return ttmr.QueryBuilder.FindAllTrainerTrainingMappingBaseQuery(ctx, filter, fields, suffixes...)
}

func (ttmr *TrainerTrainingMappingRepositoryQueryBuilder) FindAllTrainerTrainingMappingBaseQuery(ctx context.Context, filter *table.TrainerTrainingMappingFilter, fields string, suffixes ...sq.Sqlizer) (*sq.SelectBuilder, error) {
	var err error
	qb := sq.Select(fields).From("`trainer_training_mapping`")
	if filter != nil {
		if qb, err = internal.AddFilter(qb, "`trainer_training_mapping`.`id`", filter.ID); err != nil {
			return qb, err
		}
		if qb, err = internal.AddFilter(qb, "`trainer_training_mapping`.`fk_training_event`", filter.FkTrainingEvent); err != nil {
			return qb, err
		}
		if qb, err = internal.AddFilter(qb, "`trainer_training_mapping`.`fk_trainer`", filter.FkTrainer); err != nil {
			return qb, err
		}
		if qb, err = internal.AddFilter(qb, "`trainer_training_mapping`.`fk_student`", filter.FkStudent); err != nil {
			return qb, err
		}
		if filter.Active == nil {
			if qb, err = internal.AddFilter(qb, "`trainer_training_mapping`.`active`", internal.FilterOnField{{internal.Eq: true}}); err != nil {
				return qb, err
			}
		} else {
			if qb, err = internal.AddFilter(qb, "`trainer_training_mapping`.`active`", filter.Active); err != nil {
				return qb, err
			}
		}
		if qb, err = internal.AddFilter(qb, "`trainer_training_mapping`.`created_at`", filter.CreatedAt); err != nil {
			return qb, err
		}
		if qb, err = internal.AddFilter(qb, "`trainer_training_mapping`.`updated_at`", filter.UpdatedAt); err != nil {
			return qb, err
		}
		qb, err = internal.AddAdditionalFilter(qb, filter.Wheres, filter.Joins, filter.LeftJoins, filter.GroupBys, filter.Havings)
		if err != nil {
			return qb, err
		}
	} else {
		if qb, err = internal.AddFilter(qb, "`trainer_training_mapping`.`active`", internal.FilterOnField{{internal.Eq: true}}); err != nil {
			return qb, err
		}
	}

	for _, suffix := range suffixes {
		query, args, err := suffix.ToSql()
		if err != nil {
			return qb, err
		}
		qb.Suffix(query, args...)
	}
	return qb, nil
}

func (ttmr *TrainerTrainingMappingRepository) AddPagination(ctx context.Context, qb *sq.SelectBuilder, pagination *internal.Pagination) (*sq.SelectBuilder, error) {
	return ttmr.QueryBuilder.AddPagination(ctx, qb, pagination)
}

func (ttm *TrainerTrainingMappingRepositoryQueryBuilder) AddPagination(ctx context.Context, qb *sq.SelectBuilder, pagination *internal.Pagination) (*sq.SelectBuilder, error) {
	fields := []string{
		"id",
		"fk_training_event",
		"fk_trainer",
		"fk_student",
		"active",
		"created_at",
		"updated_at",
	}
	return internal.AddPagination(qb, pagination, "trainer_training_mapping", fields)
}

func (ttmr *TrainerTrainingMappingRepository) FindAllTrainerTrainingMapping(ctx context.Context, filter *table.TrainerTrainingMappingFilter, pagination *internal.Pagination) (*table.ListTrainerTrainingMapping, error) {
	return ttmr.FindAllTrainerTrainingMappingWithSuffix(ctx, filter, pagination)
}

func (ttmr *TrainerTrainingMappingRepository) FindAllTrainerTrainingMappingWithSuffix(ctx context.Context, filter *table.TrainerTrainingMappingFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListTrainerTrainingMapping, error) {
	var list table.ListTrainerTrainingMapping
	qb, err := ttmr.FindAllTrainerTrainingMappingBaseQuery(ctx, filter, "`trainer_training_mapping`.*", suffixes...)
	if err != nil {
		return &list, err
	}
	qb, err = ttmr.AddPagination(ctx, qb, pagination)
	if err != nil {
		return &list, err
	}

	err = ttmr.DB.Select(ctx, &list.Data, qb)

	if err != nil {
		return &list, err
	}

	if pagination == nil || pagination.PerPage == nil || pagination.Page == nil {
		list.TotalCount = len(list.Data)
		return &list, nil
	}

	var listMeta internal.ListMetadata
	if qb, err = ttmr.FindAllTrainerTrainingMappingBaseQuery(ctx, filter, "COUNT(1) AS count"); err != nil {
		return &table.ListTrainerTrainingMapping{}, err
	}
	if filter != nil && len(filter.GroupBys) > 0 {
		qb = sq.Select("COUNT(1) AS count").FromSelect(qb, "a")
	}
	err = ttmr.DB.Get(ctx, &listMeta, qb)

	list.TotalCount = listMeta.Count

	return &list, err
}

func (ttmr *TrainerTrainingMappingRepository) TrainerTrainingMappingByFkStudent(ctx context.Context, fkStudent int, filter *table.TrainerTrainingMappingFilter, pagination *internal.Pagination) (*table.ListTrainerTrainingMapping, error) {
	return ttmr.TrainerTrainingMappingByFkStudentWithSuffix(ctx, fkStudent, filter, pagination)
}

func (ttmr *TrainerTrainingMappingRepository) TrainerTrainingMappingByFkStudentWithSuffix(ctx context.Context, fkStudent int, filter *table.TrainerTrainingMappingFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListTrainerTrainingMapping, error) {

	var list table.ListTrainerTrainingMapping
	// sql query
	qb, err := ttmr.FindAllTrainerTrainingMappingBaseQuery(ctx, filter, "`trainer_training_mapping`.*", suffixes...)
	if err != nil {
		return &list, err
	}
	qb = qb.Where(sq.Eq{"`trainer_training_mapping`.`fk_student`": fkStudent})

	if qb, err = ttmr.AddPagination(ctx, qb, pagination); err != nil {
		return &list, err
	}

	// run query
	if err = ttmr.DB.Select(ctx, &list.Data, qb); err != nil {
		return &list, err
	}

	if pagination == nil || pagination.PerPage == nil || pagination.Page == nil {
		list.TotalCount = len(list.Data)
		return &list, nil
	}

	var listMeta internal.ListMetadata
	if qb, err = ttmr.FindAllTrainerTrainingMappingBaseQuery(ctx, filter, "COUNT(1) AS count"); err != nil {
		return &list, err
	}
	if filter != nil && len(filter.GroupBys) > 0 {
		qb = sq.Select("COUNT(1) AS count").FromSelect(qb, "a")
	}
	qb = qb.Where(sq.Eq{"`trainer_training_mapping`.`fk_student`": fkStudent})
	if err = ttmr.DB.Get(ctx, &listMeta, qb); err != nil {
		return &list, err
	}

	list.TotalCount = listMeta.Count

	return &list, nil

}

func (ttmr *TrainerTrainingMappingRepository) TrainerTrainingMappingByFkTrainer(ctx context.Context, fkTrainer int, filter *table.TrainerTrainingMappingFilter, pagination *internal.Pagination) (*table.ListTrainerTrainingMapping, error) {
	return ttmr.TrainerTrainingMappingByFkTrainerWithSuffix(ctx, fkTrainer, filter, pagination)
}

func (ttmr *TrainerTrainingMappingRepository) TrainerTrainingMappingByFkTrainerWithSuffix(ctx context.Context, fkTrainer int, filter *table.TrainerTrainingMappingFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListTrainerTrainingMapping, error) {

	var list table.ListTrainerTrainingMapping
	// sql query
	qb, err := ttmr.FindAllTrainerTrainingMappingBaseQuery(ctx, filter, "`trainer_training_mapping`.*", suffixes...)
	if err != nil {
		return &list, err
	}
	qb = qb.Where(sq.Eq{"`trainer_training_mapping`.`fk_trainer`": fkTrainer})

	if qb, err = ttmr.AddPagination(ctx, qb, pagination); err != nil {
		return &list, err
	}

	// run query
	if err = ttmr.DB.Select(ctx, &list.Data, qb); err != nil {
		return &list, err
	}

	if pagination == nil || pagination.PerPage == nil || pagination.Page == nil {
		list.TotalCount = len(list.Data)
		return &list, nil
	}

	var listMeta internal.ListMetadata
	if qb, err = ttmr.FindAllTrainerTrainingMappingBaseQuery(ctx, filter, "COUNT(1) AS count"); err != nil {
		return &list, err
	}
	if filter != nil && len(filter.GroupBys) > 0 {
		qb = sq.Select("COUNT(1) AS count").FromSelect(qb, "a")
	}
	qb = qb.Where(sq.Eq{"`trainer_training_mapping`.`fk_trainer`": fkTrainer})
	if err = ttmr.DB.Get(ctx, &listMeta, qb); err != nil {
		return &list, err
	}

	list.TotalCount = listMeta.Count

	return &list, nil

}

func (ttmr *TrainerTrainingMappingRepository) TrainerTrainingMappingByFkTrainingEvent(ctx context.Context, fkTrainingEvent int, filter *table.TrainerTrainingMappingFilter, pagination *internal.Pagination) (*table.ListTrainerTrainingMapping, error) {
	return ttmr.TrainerTrainingMappingByFkTrainingEventWithSuffix(ctx, fkTrainingEvent, filter, pagination)
}

func (ttmr *TrainerTrainingMappingRepository) TrainerTrainingMappingByFkTrainingEventWithSuffix(ctx context.Context, fkTrainingEvent int, filter *table.TrainerTrainingMappingFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListTrainerTrainingMapping, error) {

	var list table.ListTrainerTrainingMapping
	// sql query
	qb, err := ttmr.FindAllTrainerTrainingMappingBaseQuery(ctx, filter, "`trainer_training_mapping`.*", suffixes...)
	if err != nil {
		return &list, err
	}
	qb = qb.Where(sq.Eq{"`trainer_training_mapping`.`fk_training_event`": fkTrainingEvent})

	if qb, err = ttmr.AddPagination(ctx, qb, pagination); err != nil {
		return &list, err
	}

	// run query
	if err = ttmr.DB.Select(ctx, &list.Data, qb); err != nil {
		return &list, err
	}

	if pagination == nil || pagination.PerPage == nil || pagination.Page == nil {
		list.TotalCount = len(list.Data)
		return &list, nil
	}

	var listMeta internal.ListMetadata
	if qb, err = ttmr.FindAllTrainerTrainingMappingBaseQuery(ctx, filter, "COUNT(1) AS count"); err != nil {
		return &list, err
	}
	if filter != nil && len(filter.GroupBys) > 0 {
		qb = sq.Select("COUNT(1) AS count").FromSelect(qb, "a")
	}
	qb = qb.Where(sq.Eq{"`trainer_training_mapping`.`fk_training_event`": fkTrainingEvent})
	if err = ttmr.DB.Get(ctx, &listMeta, qb); err != nil {
		return &list, err
	}

	list.TotalCount = listMeta.Count

	return &list, nil

}
func (ttmr *TrainerTrainingMappingRepository) TrainerTrainingMappingByID(ctx context.Context, id int, filter *table.TrainerTrainingMappingFilter) (table.TrainerTrainingMapping, error) {
	return ttmr.TrainerTrainingMappingByIDWithSuffix(ctx, id, filter)
}

func (ttmr *TrainerTrainingMappingRepository) TrainerTrainingMappingByIDWithSuffix(ctx context.Context, id int, filter *table.TrainerTrainingMappingFilter, suffixes ...sq.Sqlizer) (table.TrainerTrainingMapping, error) {
	var err error

	// sql query
	qb, err := ttmr.FindAllTrainerTrainingMappingBaseQuery(ctx, filter, "`trainer_training_mapping`.*", suffixes...)
	if err != nil {
		return table.TrainerTrainingMapping{}, err
	}
	qb = qb.Where(sq.Eq{"`trainer_training_mapping`.`id`": id})

	// run query
	ttm := table.TrainerTrainingMapping{}
	err = ttmr.DB.Get(ctx, &ttm, qb)
	if err != nil {
		return table.TrainerTrainingMapping{}, err
	}
	return ttm, nil
}
