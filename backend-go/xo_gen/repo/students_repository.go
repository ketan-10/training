// Code generated by xo. DO NOT EDIT.

package repo

import (
	"context"
	"database/sql"

	sq "github.com/elgris/sqrl"
	"github.com/google/wire"
	"github.com/ketan-10/training/backend/internal"
	"github.com/ketan-10/training/backend/xo_gen/table"
)

type IStudentsRepository interface {
	IStudentsRepositoryQueryBuilder

	InsertStudents(ctx context.Context, s table.StudentsCreate) (*table.Students, error)
	InsertStudentsWithSuffix(ctx context.Context, s table.StudentsCreate, suffix sq.Sqlizer) (*table.Students, error)
	InsertStudentsIDResult(ctx context.Context, s table.StudentsCreate, suffix sq.Sqlizer) (int64, error)

	UpdateStudentsByFields(ctx context.Context, id int, s table.StudentsUpdate) (*table.Students, error)
	UpdateStudents(ctx context.Context, s table.Students) (*table.Students, error)

	DeleteStudents(ctx context.Context, s table.Students) error
	DeleteStudentsByID(ctx context.Context, id int) (bool, error)

	FindAllStudents(ctx context.Context, s *table.StudentsFilter, pagination *internal.Pagination) (*table.ListStudents, error)
	FindAllStudentsWithSuffix(ctx context.Context, s *table.StudentsFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListStudents, error)

	StudentsByEmail(ctx context.Context, email string, filter *table.StudentsFilter, pagination *internal.Pagination) (*table.ListStudents, error)

	StudentsByEmailWithSuffix(ctx context.Context, email string, filter *table.StudentsFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListStudents, error)

	StudentsByUUID(ctx context.Context, uuid string, filter *table.StudentsFilter, pagination *internal.Pagination) (*table.ListStudents, error)

	StudentsByUUIDWithSuffix(ctx context.Context, uuid string, filter *table.StudentsFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListStudents, error)
	StudentsByUUIDActive(ctx context.Context, uuid string, active bool, filter *table.StudentsFilter) (table.Students, error)

	StudentsByUUIDActiveWithSuffix(ctx context.Context, uuid string, active bool, filter *table.StudentsFilter, suffixes ...sq.Sqlizer) (table.Students, error)

	StudentsByName(ctx context.Context, name string, filter *table.StudentsFilter, pagination *internal.Pagination) (*table.ListStudents, error)

	StudentsByNameWithSuffix(ctx context.Context, name string, filter *table.StudentsFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListStudents, error)

	StudentsByCreatedBy(ctx context.Context, createdBy sql.NullInt64, filter *table.StudentsFilter, pagination *internal.Pagination) (*table.ListStudents, error)

	StudentsByCreatedByWithSuffix(ctx context.Context, createdBy sql.NullInt64, filter *table.StudentsFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListStudents, error)
	StudentsByID(ctx context.Context, id int, filter *table.StudentsFilter) (table.Students, error)

	StudentsByIDWithSuffix(ctx context.Context, id int, filter *table.StudentsFilter, suffixes ...sq.Sqlizer) (table.Students, error)
}

type IStudentsRepositoryQueryBuilder interface {
	FindAllStudentsBaseQuery(ctx context.Context, filter *table.StudentsFilter, fields string, suffix ...sq.Sqlizer) (*sq.SelectBuilder, error)
	AddPagination(ctx context.Context, qb *sq.SelectBuilder, pagination *internal.Pagination) (*sq.SelectBuilder, error)
}

type StudentsRepository struct {
	DB           internal.IDb
	QueryBuilder IStudentsRepositoryQueryBuilder
}

type StudentsRepositoryQueryBuilder struct {
}

var NewStudentsRepository = wire.NewSet(
	wire.Struct(new(StudentsRepository), "*"),
	wire.Struct(new(StudentsRepositoryQueryBuilder), "*"),
	wire.Bind(new(IStudentsRepository), new(*StudentsRepository)),
	wire.Bind(new(IStudentsRepositoryQueryBuilder), new(*StudentsRepositoryQueryBuilder)),
)

func (sr *StudentsRepository) InsertStudents(ctx context.Context, s table.StudentsCreate) (*table.Students, error) {
	return sr.InsertStudentsWithSuffix(ctx, s, nil)
}

func (sr *StudentsRepository) InsertStudentsWithSuffix(ctx context.Context, s table.StudentsCreate, suffix sq.Sqlizer) (*table.Students, error) {
	var err error

	id, err := sr.InsertStudentsIDResult(ctx, s, suffix)
	if err != nil {
		return nil, err
	}
	news := table.Students{}
	qb := sq.Select("*").From(`students`)

	qb.Where(sq.Eq{"`id`": id})
	err = sr.DB.Get(ctx, &news, qb)

	if err != nil {
		return nil, err
	}
	return &news, nil
}

func (sr *StudentsRepository) InsertStudentsIDResult(ctx context.Context, s table.StudentsCreate, suffix sq.Sqlizer) (int64, error) {
	var err error

	qb := sq.Insert("`students`").Columns(
		"`uuid`",
		"`name`",
		"`email`",
		"`mobile_phone`",
		"`class_name`",
		"`designation`",
		"`created_by`",
	).Values(
		s.UUID,
		s.Name,
		s.Email,
		s.MobilePhone,
		s.ClassName,
		s.Designation,
		s.CreatedBy,
	)
	if suffix != nil {
		suffixQuery, suffixArgs, suffixErr := suffix.ToSql()
		if suffixErr != nil {
			return 0, suffixErr
		}
		qb.Suffix(suffixQuery, suffixArgs...)
	}

	// run query
	res, err := sr.DB.Exec(ctx, qb)
	if err != nil {
		return 0, err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return 0, err
	}

	return id, nil
}

func (sr *StudentsRepository) UpdateStudentsByFields(ctx context.Context, id int, s table.StudentsUpdate) (*table.Students, error) {
	var err error

	updateMap := map[string]interface{}{}
	if s.UUID != nil {
		updateMap["`uuid`"] = *s.UUID
	}
	if s.Name != nil {
		updateMap["`name`"] = *s.Name
	}
	if s.Email != nil {
		updateMap["`email`"] = *s.Email
	}
	if s.MobilePhone != nil {
		updateMap["`mobile_phone`"] = *s.MobilePhone
	}
	if s.ClassName != nil {
		updateMap["`class_name`"] = *s.ClassName
	}
	if s.Designation != nil {
		updateMap["`designation`"] = *s.Designation
	}
	if s.Active != nil {
		updateMap["`active`"] = *s.Active
	}
	if s.CreatedBy != nil {
		updateMap["`created_by`"] = *s.CreatedBy
	}

	qb := sq.Update(`students`).SetMap(updateMap).Where(sq.Eq{"`id`": id})

	_, err = sr.DB.Exec(ctx, qb)
	if err != nil {
		return nil, err
	}

	selectQb := sq.Select("*").From("`students`")

	selectQb = selectQb.Where(sq.Eq{"`id`": id})

	result := table.Students{}
	err = sr.DB.Get(ctx, &result, selectQb)
	if err != nil {
		return nil, err
	}

	return &result, nil

}

func (sr *StudentsRepository) UpdateStudents(ctx context.Context, s table.Students) (*table.Students, error) {
	var err error

	// sql query
	qb := sq.Update("`students`").SetMap(map[string]interface{}{
		"`uuid`":         s.UUID,
		"`name`":         s.Name,
		"`email`":        s.Email,
		"`mobile_phone`": s.MobilePhone,
		"`class_name`":   s.ClassName,
		"`designation`":  s.Designation,
		"`active`":       s.Active,
		"`created_by`":   s.CreatedBy,
	}).Where(sq.Eq{"`id`": s.ID})

	// run query
	_, err = sr.DB.Exec(ctx, qb)
	if err != nil {
		return nil, err
	}

	selectQb := sq.Select("*").From("`students`")
	selectQb = selectQb.Where(sq.Eq{"`id`": s.ID})

	result := table.Students{}
	err = sr.DB.Get(ctx, &result, selectQb)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (sr *StudentsRepository) DeleteStudents(ctx context.Context, s table.Students) error {
	_, err := sr.DeleteStudentsByID(ctx, s.ID)
	return err
}

func (sr *StudentsRepository) DeleteStudentsByID(ctx context.Context, id int) (bool, error) {
	var err error

	qb := sq.Update("`students`").Set("active", false)

	qb = qb.Where(sq.Eq{"`id`": id})

	_, err = sr.DB.Exec(ctx, qb)
	if err != nil {
		return false, err
	}
	return true, nil
}

func (sr *StudentsRepository) FindAllStudentsBaseQuery(ctx context.Context, filter *table.StudentsFilter, fields string, suffixes ...sq.Sqlizer) (*sq.SelectBuilder, error) {
	return sr.QueryBuilder.FindAllStudentsBaseQuery(ctx, filter, fields, suffixes...)
}

func (sr *StudentsRepositoryQueryBuilder) FindAllStudentsBaseQuery(ctx context.Context, filter *table.StudentsFilter, fields string, suffixes ...sq.Sqlizer) (*sq.SelectBuilder, error) {
	var err error
	qb := sq.Select(fields).From("`students`")
	if filter != nil {
		if qb, err = internal.AddFilter(qb, "`students`.`id`", filter.ID); err != nil {
			return qb, err
		}
		if qb, err = internal.AddFilter(qb, "`students`.`uuid`", filter.UUID); err != nil {
			return qb, err
		}
		if qb, err = internal.AddFilter(qb, "`students`.`name`", filter.Name); err != nil {
			return qb, err
		}
		if qb, err = internal.AddFilter(qb, "`students`.`email`", filter.Email); err != nil {
			return qb, err
		}
		if qb, err = internal.AddFilter(qb, "`students`.`mobile_phone`", filter.MobilePhone); err != nil {
			return qb, err
		}
		if qb, err = internal.AddFilter(qb, "`students`.`class_name`", filter.ClassName); err != nil {
			return qb, err
		}
		if qb, err = internal.AddFilter(qb, "`students`.`designation`", filter.Designation); err != nil {
			return qb, err
		}
		if filter.Active == nil {
			if qb, err = internal.AddFilter(qb, "`students`.`active`", internal.FilterOnField{{internal.Eq: true}}); err != nil {
				return qb, err
			}
		} else {
			if qb, err = internal.AddFilter(qb, "`students`.`active`", filter.Active); err != nil {
				return qb, err
			}
		}
		if qb, err = internal.AddFilter(qb, "`students`.`created_at`", filter.CreatedAt); err != nil {
			return qb, err
		}
		if qb, err = internal.AddFilter(qb, "`students`.`updated_at`", filter.UpdatedAt); err != nil {
			return qb, err
		}
		if qb, err = internal.AddFilter(qb, "`students`.`created_by`", filter.CreatedBy); err != nil {
			return qb, err
		}
		qb, err = internal.AddAdditionalFilter(qb, filter.Wheres, filter.Joins, filter.LeftJoins, filter.GroupBys, filter.Havings)
		if err != nil {
			return qb, err
		}
	} else {
		if qb, err = internal.AddFilter(qb, "`students`.`active`", internal.FilterOnField{{internal.Eq: true}}); err != nil {
			return qb, err
		}
	}

	for _, suffix := range suffixes {
		query, args, err := suffix.ToSql()
		if err != nil {
			return qb, err
		}
		qb.Suffix(query, args...)
	}
	return qb, nil
}

func (sr *StudentsRepository) AddPagination(ctx context.Context, qb *sq.SelectBuilder, pagination *internal.Pagination) (*sq.SelectBuilder, error) {
	return sr.QueryBuilder.AddPagination(ctx, qb, pagination)
}

func (s *StudentsRepositoryQueryBuilder) AddPagination(ctx context.Context, qb *sq.SelectBuilder, pagination *internal.Pagination) (*sq.SelectBuilder, error) {
	fields := []string{
		"id",
		"uuid",
		"name",
		"email",
		"mobile_phone",
		"class_name",
		"designation",
		"active",
		"created_at",
		"updated_at",
		"created_by",
	}
	return internal.AddPagination(qb, pagination, "students", fields)
}

func (sr *StudentsRepository) FindAllStudents(ctx context.Context, filter *table.StudentsFilter, pagination *internal.Pagination) (*table.ListStudents, error) {
	return sr.FindAllStudentsWithSuffix(ctx, filter, pagination)
}

func (sr *StudentsRepository) FindAllStudentsWithSuffix(ctx context.Context, filter *table.StudentsFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListStudents, error) {
	var list table.ListStudents
	qb, err := sr.FindAllStudentsBaseQuery(ctx, filter, "`students`.*", suffixes...)
	if err != nil {
		return &list, err
	}
	qb, err = sr.AddPagination(ctx, qb, pagination)
	if err != nil {
		return &list, err
	}

	err = sr.DB.Select(ctx, &list.Data, qb)

	if err != nil {
		return &list, err
	}

	if pagination == nil || pagination.PerPage == nil || pagination.Page == nil {
		list.TotalCount = len(list.Data)
		return &list, nil
	}

	var listMeta internal.ListMetadata
	if qb, err = sr.FindAllStudentsBaseQuery(ctx, filter, "COUNT(1) AS count"); err != nil {
		return &table.ListStudents{}, err
	}
	if filter != nil && len(filter.GroupBys) > 0 {
		qb = sq.Select("COUNT(1) AS count").FromSelect(qb, "a")
	}
	err = sr.DB.Get(ctx, &listMeta, qb)

	list.TotalCount = listMeta.Count

	return &list, err
}

func (sr *StudentsRepository) StudentsByEmail(ctx context.Context, email string, filter *table.StudentsFilter, pagination *internal.Pagination) (*table.ListStudents, error) {
	return sr.StudentsByEmailWithSuffix(ctx, email, filter, pagination)
}

func (sr *StudentsRepository) StudentsByEmailWithSuffix(ctx context.Context, email string, filter *table.StudentsFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListStudents, error) {

	var list table.ListStudents
	// sql query
	qb, err := sr.FindAllStudentsBaseQuery(ctx, filter, "`students`.*", suffixes...)
	if err != nil {
		return &list, err
	}
	qb = qb.Where(sq.Eq{"`students`.`email`": email})

	if qb, err = sr.AddPagination(ctx, qb, pagination); err != nil {
		return &list, err
	}

	// run query
	if err = sr.DB.Select(ctx, &list.Data, qb); err != nil {
		return &list, err
	}

	if pagination == nil || pagination.PerPage == nil || pagination.Page == nil {
		list.TotalCount = len(list.Data)
		return &list, nil
	}

	var listMeta internal.ListMetadata
	if qb, err = sr.FindAllStudentsBaseQuery(ctx, filter, "COUNT(1) AS count"); err != nil {
		return &list, err
	}
	if filter != nil && len(filter.GroupBys) > 0 {
		qb = sq.Select("COUNT(1) AS count").FromSelect(qb, "a")
	}
	qb = qb.Where(sq.Eq{"`students`.`email`": email})
	if err = sr.DB.Get(ctx, &listMeta, qb); err != nil {
		return &list, err
	}

	list.TotalCount = listMeta.Count

	return &list, nil

}

func (sr *StudentsRepository) StudentsByUUID(ctx context.Context, uuid string, filter *table.StudentsFilter, pagination *internal.Pagination) (*table.ListStudents, error) {
	return sr.StudentsByUUIDWithSuffix(ctx, uuid, filter, pagination)
}

func (sr *StudentsRepository) StudentsByUUIDWithSuffix(ctx context.Context, uuid string, filter *table.StudentsFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListStudents, error) {

	var list table.ListStudents
	// sql query
	qb, err := sr.FindAllStudentsBaseQuery(ctx, filter, "`students`.*", suffixes...)
	if err != nil {
		return &list, err
	}
	qb = qb.Where(sq.Eq{"`students`.`uuid`": uuid})

	if qb, err = sr.AddPagination(ctx, qb, pagination); err != nil {
		return &list, err
	}

	// run query
	if err = sr.DB.Select(ctx, &list.Data, qb); err != nil {
		return &list, err
	}

	if pagination == nil || pagination.PerPage == nil || pagination.Page == nil {
		list.TotalCount = len(list.Data)
		return &list, nil
	}

	var listMeta internal.ListMetadata
	if qb, err = sr.FindAllStudentsBaseQuery(ctx, filter, "COUNT(1) AS count"); err != nil {
		return &list, err
	}
	if filter != nil && len(filter.GroupBys) > 0 {
		qb = sq.Select("COUNT(1) AS count").FromSelect(qb, "a")
	}
	qb = qb.Where(sq.Eq{"`students`.`uuid`": uuid})
	if err = sr.DB.Get(ctx, &listMeta, qb); err != nil {
		return &list, err
	}

	list.TotalCount = listMeta.Count

	return &list, nil

}
func (sr *StudentsRepository) StudentsByUUIDActive(ctx context.Context, uuid string, active bool, filter *table.StudentsFilter) (table.Students, error) {
	return sr.StudentsByUUIDActiveWithSuffix(ctx, uuid, active, filter)
}

func (sr *StudentsRepository) StudentsByUUIDActiveWithSuffix(ctx context.Context, uuid string, active bool, filter *table.StudentsFilter, suffixes ...sq.Sqlizer) (table.Students, error) {
	var err error

	// sql query
	qb, err := sr.FindAllStudentsBaseQuery(ctx, filter, "`students`.*", suffixes...)
	if err != nil {
		return table.Students{}, err
	}
	qb = qb.Where(sq.Eq{"`students`.`uuid`": uuid})
	qb = qb.Where(sq.Eq{"`students`.`active`": active})

	// run query
	s := table.Students{}
	err = sr.DB.Get(ctx, &s, qb)
	if err != nil {
		return table.Students{}, err
	}
	return s, nil
}

func (sr *StudentsRepository) StudentsByName(ctx context.Context, name string, filter *table.StudentsFilter, pagination *internal.Pagination) (*table.ListStudents, error) {
	return sr.StudentsByNameWithSuffix(ctx, name, filter, pagination)
}

func (sr *StudentsRepository) StudentsByNameWithSuffix(ctx context.Context, name string, filter *table.StudentsFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListStudents, error) {

	var list table.ListStudents
	// sql query
	qb, err := sr.FindAllStudentsBaseQuery(ctx, filter, "`students`.*", suffixes...)
	if err != nil {
		return &list, err
	}
	qb = qb.Where(sq.Eq{"`students`.`name`": name})

	if qb, err = sr.AddPagination(ctx, qb, pagination); err != nil {
		return &list, err
	}

	// run query
	if err = sr.DB.Select(ctx, &list.Data, qb); err != nil {
		return &list, err
	}

	if pagination == nil || pagination.PerPage == nil || pagination.Page == nil {
		list.TotalCount = len(list.Data)
		return &list, nil
	}

	var listMeta internal.ListMetadata
	if qb, err = sr.FindAllStudentsBaseQuery(ctx, filter, "COUNT(1) AS count"); err != nil {
		return &list, err
	}
	if filter != nil && len(filter.GroupBys) > 0 {
		qb = sq.Select("COUNT(1) AS count").FromSelect(qb, "a")
	}
	qb = qb.Where(sq.Eq{"`students`.`name`": name})
	if err = sr.DB.Get(ctx, &listMeta, qb); err != nil {
		return &list, err
	}

	list.TotalCount = listMeta.Count

	return &list, nil

}

func (sr *StudentsRepository) StudentsByCreatedBy(ctx context.Context, createdBy sql.NullInt64, filter *table.StudentsFilter, pagination *internal.Pagination) (*table.ListStudents, error) {
	return sr.StudentsByCreatedByWithSuffix(ctx, createdBy, filter, pagination)
}

func (sr *StudentsRepository) StudentsByCreatedByWithSuffix(ctx context.Context, createdBy sql.NullInt64, filter *table.StudentsFilter, pagination *internal.Pagination, suffixes ...sq.Sqlizer) (*table.ListStudents, error) {

	var list table.ListStudents
	// sql query
	qb, err := sr.FindAllStudentsBaseQuery(ctx, filter, "`students`.*", suffixes...)
	if err != nil {
		return &list, err
	}
	qb = qb.Where(sq.Eq{"`students`.`created_by`": createdBy})

	if qb, err = sr.AddPagination(ctx, qb, pagination); err != nil {
		return &list, err
	}

	// run query
	if err = sr.DB.Select(ctx, &list.Data, qb); err != nil {
		return &list, err
	}

	if pagination == nil || pagination.PerPage == nil || pagination.Page == nil {
		list.TotalCount = len(list.Data)
		return &list, nil
	}

	var listMeta internal.ListMetadata
	if qb, err = sr.FindAllStudentsBaseQuery(ctx, filter, "COUNT(1) AS count"); err != nil {
		return &list, err
	}
	if filter != nil && len(filter.GroupBys) > 0 {
		qb = sq.Select("COUNT(1) AS count").FromSelect(qb, "a")
	}
	qb = qb.Where(sq.Eq{"`students`.`created_by`": createdBy})
	if err = sr.DB.Get(ctx, &listMeta, qb); err != nil {
		return &list, err
	}

	list.TotalCount = listMeta.Count

	return &list, nil

}
func (sr *StudentsRepository) StudentsByID(ctx context.Context, id int, filter *table.StudentsFilter) (table.Students, error) {
	return sr.StudentsByIDWithSuffix(ctx, id, filter)
}

func (sr *StudentsRepository) StudentsByIDWithSuffix(ctx context.Context, id int, filter *table.StudentsFilter, suffixes ...sq.Sqlizer) (table.Students, error) {
	var err error

	// sql query
	qb, err := sr.FindAllStudentsBaseQuery(ctx, filter, "`students`.*", suffixes...)
	if err != nil {
		return table.Students{}, err
	}
	qb = qb.Where(sq.Eq{"`students`.`id`": id})

	// run query
	s := table.Students{}
	err = sr.DB.Get(ctx, &s, qb)
	if err != nil {
		return table.Students{}, err
	}
	return s, nil
}
